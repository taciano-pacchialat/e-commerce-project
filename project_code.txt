===== lib/services/bloc/navigation_states.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationState extends Equatable {
  const NavigationState();

  @override
  List<Object> get props => [];
}

class HomeState extends NavigationState {}

class CategoriesState extends NavigationState {}

class HelpSupportState extends NavigationState {}

class ProductDetailState extends NavigationState {
  final String productId;

  const ProductDetailState(this.productId);

  @override
  List<Object> get props => [productId];
}



===== lib/services/bloc/navigation_events.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationEvent extends Equatable {
  const NavigationEvent();

  @override
  List<Object> get props => [];
}

class NavigateToHome extends NavigationEvent {}

class NavigateToCategories extends NavigationEvent {}

class NavigateToHelpSupport extends NavigationEvent {}

class NavigateToProductDetail extends NavigationEvent {
  final String productId;

  const NavigateToProductDetail(this.productId);

  @override
  List<Object> get props => [productId];
}



===== lib/services/bloc/navigation_bloc.dart =====
import 'package:flutter_bloc/flutter_bloc.dart';
import 'navigation_events.dart';
import 'navigation_states.dart';

class NavigationBloc extends Bloc<NavigationEvent, NavigationState> {
  NavigationBloc() : super(HomeState());

  Stream<NavigationState> mapEventToState(NavigationEvent event) async* {
	  if (event is NavigateToHome) {
	    yield HomeState();
	  } else if (event is NavigateToCategories) {
	    yield CategoriesState();
	  } else if (event is NavigateToHelpSupport) {
	    yield HelpSupportState();
	  } else if (event is NavigateToProductDetail) {
	    yield ProductDetailState(event.productId);
	  }
  }
}


===== lib/services/store/product.dart =====
class Product {
  String title;
  String description;
  String category;
  double unitPrice;
  List<String> images;
  String sku;
  String slug;
  int inventory;
  DateTime lastUpdate;
  String productCollection;
  bool promotion;

  Product({
    required this.title,
    required this.description,
    required this.category,
    required this.unitPrice,
    required this.images,
    required this.sku,
    required this.slug,
    required this.inventory,
    required this.lastUpdate,
    required this.productCollection,
    required this.promotion,
  });
}



===== lib/utilities/no_paste_text_formatter.dart =====
import 'package:flutter/services.dart';

class NoPasteTextFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    if (newValue.text.length > oldValue.text.length + 1) {
      return oldValue;
    }
    return newValue;
  }
}



===== lib/main.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/views/store/main_store_view.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(MaterialApp(
    title: 'E-Commerce',
    theme: ThemeData(
      appBarTheme: const AppBarTheme(
        iconTheme: IconThemeData(
          size: 22.0,
        ),
      ),
    ),
    home: const HomePage(),
    debugShowCheckedModeBanner: false,
  ));
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      home: MainStoreView(),
      debugShowCheckedModeBanner: false,
    );
  }
}



===== lib/constants/app_colors.dart =====
import 'package:flutter/material.dart';

class AppColors {
  // primary colors
  static const Color primaryBurgundy = Color.fromARGB(255, 92, 26, 27);
  static const Color primaryCream = Color.fromARGB(255, 245, 245, 220);

  // secondary colors
  static const Color secondaryGold = Color.fromARGB(255, 201, 163, 44);
  static const Color secondaryGreen = Color.fromARGB(255, 47, 79, 79);

  // accent colors
  static const Color accentBrown = Color.fromARGB(255, 139, 69, 19);
  static const Color accentGray = Color.fromARGB(255, 112, 128, 144);
}



===== lib/widgets/drawer_list_tile.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/constants/app_colors.dart';

class DrawerListTile extends StatelessWidget {
  final String title;
  final VoidCallback onTap;

  const DrawerListTile({
    super.key,
    required this.title,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Padding(
        padding: const EdgeInsets.only(
          left: 28.0,
          top: 8.0,
          bottom: 8.0,
        ),
        child: Text(
          title,
          style: const TextStyle(
            fontSize: 16.0,
            fontWeight: FontWeight.w100,
            color: AppColors.primaryBurgundy,
          ),
        ),
      ),
      onTap: onTap,
    );
  }
}



===== lib/widgets/product_card.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/constants/app_colors.dart';
import 'package:frontend/services/store/product.dart';

class ProductCard extends StatelessWidget {
  final Product product;

  const ProductCard({
    required this.product,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        return Card(
          color: AppColors.primaryCream,
          shape: const RoundedRectangleBorder(
            side: BorderSide(
              color: AppColors.secondaryGold,
            ),
            borderRadius: BorderRadius.all(
              Radius.circular(8.0),
            ),
          ),
          elevation: 4.0,
          child: Column(
            children: [
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(
                    top: 8.0,
                    left: 8.0,
                    right: 8.0,
                  ),
                  child: ClipRRect(
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(8.0),
                      topRight: Radius.circular(8.0),
                    ),
                    child: Image.asset(
                      product.images[0],
                      fit: BoxFit.cover,
                      width: double.infinity,
                    ),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(
                  top: 8.0,
                  bottom: 8.0,
                  left: 12.0,
                ),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: Text(
                    product.title,
                    style: const TextStyle(
                      color: AppColors.primaryBurgundy,
                      fontWeight: FontWeight.bold,
                      fontSize: 18.0,
                    ),
                    maxLines: 2,
                  ),
                ),
              ),
              Container(
                padding: const EdgeInsets.all(8.0),
                margin: const EdgeInsets.symmetric(horizontal: 1.32),
                decoration: const BoxDecoration(
                  color: AppColors.secondaryGreen,
                  borderRadius: BorderRadius.only(
                    bottomLeft: Radius.circular(8.0),
                    bottomRight: Radius.circular(8.0),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        color: AppColors.primaryCream,
                        fontWeight: FontWeight.w100,
                        fontSize: 16.0,
                      ),
                    ),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.secondaryGold,
                        textStyle: const TextStyle(
                          color: AppColors.primaryBurgundy,
                        ),
                        shape: const LinearBorder(),
                      ),
                      onPressed: () {
                        // Handle button press
                      },
                      child: const Text('View'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}



===== lib/widgets/custom_search_delegate.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/constants/app_colors.dart';
import 'package:frontend/services/store/product.dart';

class CustomSearchDelegate extends SearchDelegate {
  final List<Product> data;

  CustomSearchDelegate(this.data);

  //TODO change the font weight of the search prompt

  @override
  ThemeData appBarTheme(BuildContext context) {
    return ThemeData(
      appBarTheme: const AppBarTheme(
        backgroundColor: AppColors.primaryBurgundy,
        elevation: 10.0,
      ),
      iconTheme: const IconThemeData(color: AppColors.primaryCream),
      inputDecorationTheme: const InputDecorationTheme(
        hintStyle: TextStyle(color: Color.fromARGB(255, 131, 131, 131)),
        border: InputBorder.none,
      ),
    );
  }

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: IconButton(
          icon: const Icon(Icons.clear),
          color: AppColors.primaryCream,
          onPressed: () {
            if (query.isEmpty) {
              close(context, null);
            } else {
              query = '';
            }
          },
        ),
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const IconTheme(
        data: IconThemeData(size: 22.0),
        child: Icon(
          Icons.arrow_back,
          color: AppColors.primaryCream,
        ),
      ),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  TextStyle? get searchFieldStyle => const TextStyle(
        color: AppColors.primaryCream,
        fontSize: 18,
        fontWeight: FontWeight.w100,
      );

  @override
  Widget buildResults(BuildContext context) {
    final results = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();
    return ListView.builder(
      itemCount: results.length,
      itemBuilder: (context, index) {
        final product = results[index];
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Card(
            color: const Color(
                0xFFF5F5DC), // Background color similar to the image
            shape: RoundedRectangleBorder(
              side: const BorderSide(color: Color(0xFFC9A32C)), // Border color
              borderRadius: BorderRadius.circular(8.0), // Rounded corners
            ),
            child: ListTile(
              leading: Image.network(
                product.images[0],
                width: 50,
                height: 50,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.error),
              ),
              title: Text(
                product.title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF5C1A1B), // Text color
                ),
              ),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(product.category), // Displaying category (e.g., Guitars)
                  Text(
                    '\$${product.unitPrice}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.green, // Price color
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return Padding(
      padding: const EdgeInsets.only(top: 20.0),
      child: ListView.builder(
        itemCount: suggestions.length,
        itemBuilder: (context, index) {
          final product = suggestions[index];
          return Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 2.0),
            child: Card(
              color: const Color(0xFFF5F5DC), // Background color
              shape: RoundedRectangleBorder(
                side:
                    const BorderSide(color: Color(0xFFC9A32C)), // Border color
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: ListTile(
                leading: Image.network(
                  product.images[0],
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.error),
                ),
                title: Text(
                  product.title,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF5C1A1B),
                  ),
                ),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      product.category,
                    ), // Displaying category (e.g., Guitars)
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.green,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                onTap: () {
                  query = suggestions[index].title;
                  showResults(context);
                },
              ),
            ),
          );
        },
      ),
    );
  }
}



===== lib/widgets/custom_drawer.dart =====
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:frontend/constants/app_colors.dart';
import 'package:frontend/services/bloc/navigation_bloc.dart';
import 'package:frontend/services/bloc/navigation_events.dart';
import 'package:frontend/widgets/drawer_list_tile.dart';

class CustomDrawer extends StatelessWidget {
  final List<String> drawerItems;

  const CustomDrawer({
    super.key,
    required this.drawerItems,
  });

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;

    return Drawer(
      backgroundColor: AppColors.primaryCream,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topRight: Radius.zero,
          bottomRight: Radius.zero,
        ),
      ),
      width: screenWidth * 0.7,
      child: ListView.separated(
        padding: EdgeInsets.zero,
        itemCount: drawerItems.length + 2, // +1 for the header & box
        itemBuilder: (context, index) {
          if (index == 0) {
            return Container(
              color: AppColors.primaryBurgundy,
              padding: const EdgeInsets.only(
                left: 18.0,
                top: 8.0,
                bottom: 10.0,
              ),
              child: const Text(
                'Charly Store',
                style: TextStyle(
                  color: AppColors.primaryCream,
                  fontSize: 28.0,
                  fontWeight: FontWeight.w400,
                ),
              ),
            );
          } else if (index == 1) {
            return const SizedBox(height: 22.0);
          } else {
            final title = drawerItems[index - 2];
            return DrawerListTile(
              title: title,
              onTap: () {
                // TODO: handle navigation based on the title
                if (title == 'Home') {
                  // Navigate to home screen
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHome());
                } else if (title == 'Categories') {
                  // Navigate to categories
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToCategories());
                } else if (title == 'Help & Support') {
                  // Navigate to help & support
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHelpSupport());
                }
              },
            );
          }
        },
        separatorBuilder: (BuildContext context, int index) {
          return [0, 1].contains(index)
              ? const SizedBox.shrink()
              : Divider(
                  height: 1.0,
                  indent: screenWidth * 0.08,
                  endIndent: screenWidth * 0.08,
                  color: AppColors.secondaryGold,
                );
        },
      ),
    );
  }
}



===== lib/views/store/product_detail_view.dart =====
import 'package:carousel_slider/carousel_slider.dart';
import 'package:flutter/material.dart';
import 'package:frontend/services/store/product.dart';

class ProductDetailView extends StatelessWidget {
  final Product product;

  const ProductDetailView({required this.product, super.key});

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      appBar: AppBar(),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: EdgeInsets.only(
                left: screenWidth * 0.08,
                right: screenWidth * 0.08,
                top: screenHeight * 0.01,
              ),
              child: Text(
                product.title,
                style: const TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.w300,
                ),
              ),
            ),
            CarouselSlider(
              options: CarouselOptions(
                height: screenHeight * 0.7,
                viewportFraction: 0.98,
                enlargeCenterPage: true,
                enlargeStrategy: CenterPageEnlargeStrategy.height,
                enableInfiniteScroll: false,
              ),
              items: product.images.map(
                (image) {
                  return Builder(
                    builder: (context) {
                      return Image.asset(image, fit: BoxFit.contain);
                    },
                  );
                },
              ).toList(),
            ),
            Padding(
              padding: EdgeInsets.symmetric(
                vertical: 0.0,
                horizontal: screenWidth * 0.08,
              ),
              child: Text(
                '\$${product.unitPrice.toStringAsFixed(2)}',
                style: const TextStyle(
                  fontSize: 48,
                  fontWeight: FontWeight.normal,
                ),
              ),
            ),
            Padding(
              padding: EdgeInsets.only(
                top: screenWidth * 0.02,
                bottom: 0.0,
                left: screenWidth * 0.05,
                right: screenWidth * 0.05,
              ),
              child: Text(
                product.description,
                style: const TextStyle(
                  fontSize: 16,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}



===== lib/views/store/main_store_view.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/constants/app_colors.dart';
import 'package:frontend/widgets/custom_drawer.dart';
import 'package:frontend/widgets/custom_search_delegate.dart';
import 'package:frontend/services/store/product.dart';
import 'package:frontend/widgets/product_card.dart';

final List<Product> mockProducts = [
  Product(
    title: 'Fender Stratocaster',
    description: 'Classic electric guitar with a timeless sound.',
    category: 'Guitar',
    unitPrice: 1199.99,
    images: [
      'assets/images/fender-stratocaster/fender-stratocaster-1.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-2.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-3.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-4.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-5.jpg',
    ],
    sku: 'FEND-STRAT',
    slug: 'fender-stratocaster',
    inventory: 15,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    title: 'Gibson Les Paul',
    description: 'Iconic electric guitar known for its rich tone.',
    unitPrice: 2499.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-les-paul/gibson-les-paul-1.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-2.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-3.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-4.jpg',
    ],
    sku: 'GIBS-LESPAUL',
    slug: 'gibson-les-paul',
    inventory: 10,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    title: 'Fender Telecaster',
    description: 'Versatile electric guitar with a distinctive twang.',
    unitPrice: 999.99,
    category: 'Guitar',
    images: [
      'assets/images/fender-telecaster/fender-telecaster-1.jpeg',
    ],
    sku: 'FEND-TELE',
    slug: 'fender-telecaster',
    inventory: 8,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    title: 'Gibson SG',
    description: 'Classic electric guitar with a powerful sound.',
    unitPrice: 1999.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-sg/gibson-sg-1.jpeg',
    ],
    sku: 'GIBS-SG',
    slug: 'gibson-sg',
    inventory: 12,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    title: 'Shure SM58 Microphone',
    description: 'Legendary vocal microphone with excellent sound quality.',
    unitPrice: 99.99,
    category: 'Audio',
    images: [
      'assets/images/mic-shure/mic-shure-1.jpeg',
    ],
    sku: 'SHURE-SM58',
    slug: 'shure-sm58',
    inventory: 20,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: true,
  ),
  Product(
    title: 'Universal Audio Apollo Twin X',
    description: 'High-quality audio interface for professional recording.',
    unitPrice: 1299.99,
    category: 'Audio',
    images: [
      'assets/images/apollo-interface/apollo-interface-1.jpeg',
    ],
    sku: 'UA-APOLLO',
    slug: 'universal-audio-apollo-twin-x',
    inventory: 5,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: false,
  ),
  Product(
    title: 'Marshall JVM410H Amplifier',
    description: 'Versatile guitar amplifier with a wide range of tones.',
    unitPrice: 1999.99,
    category: 'Amplifier',
    images: [
      'assets/images/marshall-jvm410h/marshall-jvm410h-1.jpeg',
    ],
    sku: 'MARSH-JVM410H',
    slug: 'marshall-jvm410h',
    inventory: 7,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: true,
  ),
  Product(
    title: 'Orange Rockerverb 50 MKIII',
    description: 'Powerful and versatile guitar amplifier head.',
    unitPrice: 2499.99,
    category: 'Amplifier',
    images: [
      'assets/images/orange-rockerverb50-mkii/orange-rockerverb50-mkii-1.jpeg',
    ],
    sku: 'ORANGE-RV50',
    slug: 'orange-rockerverb50-mkii',
    inventory: 3,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: false,
  ),
];

class MainStoreView extends StatelessWidget {
  const MainStoreView({super.key});

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;

    final List<String> drawerItems = ['Home', 'Categories', 'Help & Support'];

    return Scaffold(
      appBar: AppBar(
        backgroundColor: AppColors.primaryBurgundy,
        title: const Align(
          alignment: Alignment.centerLeft,
          child: Text(
            'Charly Store',
            style: TextStyle(
              fontSize: 28.0,
              fontWeight: FontWeight.w400,
              color: AppColors.primaryCream,
            ),
          ),
        ),
        iconTheme: const IconThemeData(
          color: AppColors.primaryCream,
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: IconButton(
              icon: const Icon(Icons.search),
              onPressed: () {
                showSearch(
                  context: context,
                  delegate: CustomSearchDelegate(mockProducts),
                );
              },
            ),
          ),
        ],
      ),
      drawer: CustomDrawer(
        drawerItems: drawerItems,
      ),
      backgroundColor: AppColors.primaryCream,
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: GridView.builder(
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 8.0,
            mainAxisSpacing: 8.0,
            childAspectRatio: screenHeight / screenWidth * 0.55,
          ),
          itemCount: mockProducts.length,
          itemBuilder: (context, index) {
            return ProductCard(
              product: mockProducts[index],
            );
          },
        ),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(
    home: MainStoreView(),
  ));
}



===== lib/helpers/loading_screen_controller.dart =====
import 'package:flutter/foundation.dart' show immutable;

typedef CloseLoadingScreen = bool Function();
typedef UpdateLoadingScreen = bool Function(String text);

@immutable
class LoadingScreenController {
  final CloseLoadingScreen close;
  final UpdateLoadingScreen update;

  const LoadingScreenController({required this.close, required this.update});
}



===== lib/helpers/loading_screen.dart =====
import 'package:flutter/material.dart';
import 'dart:math';

import 'package:frontend/constants/app_colors.dart';

class LoadingScreen extends StatefulWidget {
  const LoadingScreen({super.key});

  @override
  _LoadingScreenState createState() => _LoadingScreenState();
}

class _LoadingScreenState extends State<LoadingScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.primaryCream,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            AnimatedBuilder(
              animation: _animation,
              builder: (_, child) {
                return Transform.rotate(
                  angle: _animation.value * 2 * pi,
                  child: child,
                );
              },
            ),
            const SizedBox(height: 24),
            const Text(
              'Audio Gear Catalog',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.primaryBurgundy,
              ),
            ),
            const SizedBox(height: 24),
            const SizedBox(
              width: 200,
              child: LinearProgressIndicator(
                valueColor:
                    AlwaysStoppedAnimation<Color>(AppColors.primaryBurgundy),
                backgroundColor: AppColors.secondaryGold,
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Loading your gear...',
              style: TextStyle(
                color: AppColors.secondaryGold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}



===== lib/services/bloc/navigation_states.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationState extends Equatable {
  const NavigationState({
    required this.isLoading,
    this.loadingText = 'Please wait a moment',
  });

  final bool isLoading;
  final String? loadingText;

  @override
  List<Object> get props => [isLoading, loadingText ?? ''];
}

class HomeState extends NavigationState {
  const HomeState({required super.isLoading});
}

class CategoriesState extends NavigationState {
  const CategoriesState({required super.isLoading});
}

class HelpSupportState extends NavigationState {
  const HelpSupportState({required super.isLoading});
}

class ProductDetailState extends NavigationState {
  final String productId;

  const ProductDetailState(this.productId) : super(isLoading: false);

  @override
  List<Object> get props => [productId, isLoading];
}



===== lib/services/bloc/navigation_events.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationEvent extends Equatable {
  const NavigationEvent();

  @override
  List<Object> get props => [];
}

class NavigateToHome extends NavigationEvent {}

class NavigateToCategories extends NavigationEvent {}

class NavigateToHelpSupport extends NavigationEvent {}

class NavigateToProductDetail extends NavigationEvent {
  final String productId;

  const NavigateToProductDetail(this.productId);

  @override
  List<Object> get props => [productId];
}



===== lib/services/bloc/navigation_bloc.dart =====
import 'package:flutter_bloc/flutter_bloc.dart';
import 'navigation_events.dart';
import 'navigation_states.dart';

class NavigationBloc extends Bloc<NavigationEvent, NavigationState> {
  NavigationBloc() : super(const HomeState(isLoading: false)) {
    on<NavigateToHome>(
        (event, emit) => emit(const HomeState(isLoading: false)));
    on<NavigateToCategories>(
        (event, emit) => emit(const CategoriesState(isLoading: false)));
    on<NavigateToHelpSupport>(
        (event, emit) => emit(const HelpSupportState(isLoading: false)));
    on<NavigateToProductDetail>(
        (event, emit) => emit(ProductDetailState(event.productId)));
  }
}



===== lib/services/store/product.dart =====
class Product {
  String title;
  String description;
  String category;
  double unitPrice;
  List<String> images;
  String sku;
  String slug;
  int inventory;
  DateTime lastUpdate;
  String productCollection;
  bool promotion;

  Product({
    required this.title,
    required this.description,
    required this.category,
    required this.unitPrice,
    required this.images,
    required this.sku,
    required this.slug,
    required this.inventory,
    required this.lastUpdate,
    required this.productCollection,
    required this.promotion,
  });
}



===== lib/utilities/no_paste_text_formatter.dart =====
import 'package:flutter/services.dart';

class NoPasteTextFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    if (newValue.text.length > oldValue.text.length + 1) {
      return oldValue;
    }
    return newValue;
  }
}



===== lib/main.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/helpers/loading_screen.dart';
import 'package:frontend/services/bloc/navigation_events.dart';
import 'package:frontend/services/bloc/navigation_states.dart';
import 'package:frontend/views/store/main_store_view.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import 'services/bloc/navigation_bloc.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(
    MaterialApp(
      title: 'Charly Store',
      home: BlocProvider<NavigationBloc>(
        create: (context) => NavigationBloc(),
        child: const HomePage(),
      ),
    ),
  );
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    context.read<NavigationBloc>().add(NavigateToHome());
    return BlocConsumer<NavigationBloc, NavigationState>(
      listener: (context, state) {
        if (state.isLoading) {
          showDialog(context: context, barrierDismissible: false, builder: (BuildContext context) {
            return const LoadingScreen();
          },);
        } else {
          Navigator.of(context, rootNavigator: true).pop();
        }
      },
      builder: (context, state) {
        if (state is HomeState) {
          return const MainStoreView();
        } else if (state is CategoriesState) {
          return const CategoriesView();
        } else if (state is HelpSupportState) {
          return const HelpSupportView();
        } else {
          return const Scaffold(
            body: CircularProgressIndicator(),
          )
        }
      },
    );
  }
}



===== lib/constants/app_colors.dart =====
import 'package:flutter/material.dart';

class AppColors {
  // primary colors
  static const Color primaryBurgundy = Color.fromARGB(255, 92, 26, 27);
  static const Color primaryCream = Color.fromARGB(255, 245, 245, 220);

  // secondary colors
  static const Color secondaryGold = Color.fromARGB(255, 201, 163, 44);
  static const Color secondaryGreen = Color.fromARGB(255, 47, 79, 79);

  // accent colors
  static const Color accentBrown = Color.fromARGB(255, 139, 69, 19);
  static const Color accentGray = Color.fromARGB(255, 112, 128, 144);
}



===== lib/widgets/drawer_list_tile.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/constants/app_colors.dart';

class DrawerListTile extends StatelessWidget {
  final String title;
  final VoidCallback onTap;

  const DrawerListTile({
    super.key,
    required this.title,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Padding(
        padding: const EdgeInsets.only(
          left: 28.0,
          top: 8.0,
          bottom: 8.0,
        ),
        child: Text(
          title,
          style: const TextStyle(
            fontSize: 16.0,
            fontWeight: FontWeight.w100,
            color: AppColors.primaryBurgundy,
          ),
        ),
      ),
      onTap: onTap,
    );
  }
}



===== lib/widgets/product_card.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/constants/app_colors.dart';
import 'package:frontend/services/store/product.dart';

class ProductCard extends StatelessWidget {
  final Product product;

  const ProductCard({
    required this.product,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        return Card(
          color: AppColors.primaryCream,
          shape: const RoundedRectangleBorder(
            side: BorderSide(
              color: AppColors.secondaryGold,
            ),
            borderRadius: BorderRadius.all(
              Radius.circular(8.0),
            ),
          ),
          elevation: 4.0,
          child: Column(
            children: [
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(
                    top: 8.0,
                    left: 8.0,
                    right: 8.0,
                  ),
                  child: ClipRRect(
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(8.0),
                      topRight: Radius.circular(8.0),
                    ),
                    child: Image.asset(
                      product.images[0],
                      fit: BoxFit.cover,
                      width: double.infinity,
                    ),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(
                  top: 8.0,
                  bottom: 8.0,
                  left: 12.0,
                ),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: Text(
                    product.title,
                    style: const TextStyle(
                      color: AppColors.primaryBurgundy,
                      fontWeight: FontWeight.bold,
                      fontSize: 18.0,
                    ),
                    maxLines: 2,
                  ),
                ),
              ),
              Container(
                padding: const EdgeInsets.all(8.0),
                margin: const EdgeInsets.symmetric(horizontal: 1.32),
                decoration: const BoxDecoration(
                  color: AppColors.secondaryGreen,
                  borderRadius: BorderRadius.only(
                    bottomLeft: Radius.circular(8.0),
                    bottomRight: Radius.circular(8.0),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        color: AppColors.primaryCream,
                        fontWeight: FontWeight.w100,
                        fontSize: 16.0,
                      ),
                    ),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.secondaryGold,
                        textStyle: const TextStyle(
                          color: AppColors.primaryBurgundy,
                        ),
                        shape: const LinearBorder(),
                      ),
                      onPressed: () {
                        // Handle button press
                      },
                      child: const Text('View'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}



===== lib/widgets/custom_search_delegate.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/constants/app_colors.dart';
import 'package:frontend/services/store/product.dart';

class CustomSearchDelegate extends SearchDelegate {
  final List<Product> data;

  CustomSearchDelegate(this.data);

  //TODO change the font weight of the search prompt

  @override
  ThemeData appBarTheme(BuildContext context) {
    return ThemeData(
      appBarTheme: const AppBarTheme(
        backgroundColor: AppColors.primaryBurgundy,
        elevation: 10.0,
      ),
      iconTheme: const IconThemeData(color: AppColors.primaryCream),
      inputDecorationTheme: const InputDecorationTheme(
        hintStyle: TextStyle(color: Color.fromARGB(255, 131, 131, 131)),
        border: InputBorder.none,
      ),
    );
  }

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: IconButton(
          icon: const Icon(Icons.clear),
          color: AppColors.primaryCream,
          onPressed: () {
            if (query.isEmpty) {
              close(context, null);
            } else {
              query = '';
            }
          },
        ),
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const IconTheme(
        data: IconThemeData(size: 22.0),
        child: Icon(
          Icons.arrow_back,
          color: AppColors.primaryCream,
        ),
      ),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  TextStyle? get searchFieldStyle => const TextStyle(
        color: AppColors.primaryCream,
        fontSize: 18,
        fontWeight: FontWeight.w100,
      );

  @override
  Widget buildResults(BuildContext context) {
    final results = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();
    return ListView.builder(
      itemCount: results.length,
      itemBuilder: (context, index) {
        final product = results[index];
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Card(
            color: const Color(
                0xFFF5F5DC), // Background color similar to the image
            shape: RoundedRectangleBorder(
              side: const BorderSide(color: Color(0xFFC9A32C)), // Border color
              borderRadius: BorderRadius.circular(8.0), // Rounded corners
            ),
            child: ListTile(
              leading: Image.network(
                product.images[0],
                width: 50,
                height: 50,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.error),
              ),
              title: Text(
                product.title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF5C1A1B), // Text color
                ),
              ),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(product.category), // Displaying category (e.g., Guitars)
                  Text(
                    '\$${product.unitPrice}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.green, // Price color
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return Padding(
      padding: const EdgeInsets.only(top: 20.0),
      child: ListView.builder(
        itemCount: suggestions.length,
        itemBuilder: (context, index) {
          final product = suggestions[index];
          return Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 2.0),
            child: Card(
              color: const Color(0xFFF5F5DC), // Background color
              shape: RoundedRectangleBorder(
                side:
                    const BorderSide(color: Color(0xFFC9A32C)), // Border color
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: ListTile(
                leading: Image.network(
                  product.images[0],
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.error),
                ),
                title: Text(
                  product.title,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF5C1A1B),
                  ),
                ),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      product.category,
                    ), // Displaying category (e.g., Guitars)
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.green,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                onTap: () {
                  query = suggestions[index].title;
                  showResults(context);
                },
              ),
            ),
          );
        },
      ),
    );
  }
}



===== lib/widgets/custom_drawer.dart =====
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:frontend/constants/app_colors.dart';
import 'package:frontend/services/bloc/navigation_bloc.dart';
import 'package:frontend/services/bloc/navigation_events.dart';
import 'package:frontend/widgets/drawer_list_tile.dart';

class CustomDrawer extends StatelessWidget {
  final List<String> drawerItems;

  const CustomDrawer({
    super.key,
    required this.drawerItems,
  });

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;

    return Drawer(
      backgroundColor: AppColors.primaryCream,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topRight: Radius.zero,
          bottomRight: Radius.zero,
        ),
      ),
      width: screenWidth * 0.7,
      child: ListView.separated(
        padding: EdgeInsets.zero,
        itemCount: drawerItems.length + 2, // +1 for the header & box
        itemBuilder: (context, index) {
          if (index == 0) {
            return Container(
              color: AppColors.primaryBurgundy,
              padding: const EdgeInsets.only(
                left: 18.0,
                top: 8.0,
                bottom: 10.0,
              ),
              child: const Text(
                'Charly Store',
                style: TextStyle(
                  color: AppColors.primaryCream,
                  fontSize: 28.0,
                  fontWeight: FontWeight.w400,
                ),
              ),
            );
          } else if (index == 1) {
            return const SizedBox(height: 22.0);
          } else {
            final title = drawerItems[index - 2];
            return DrawerListTile(
              title: title,
              onTap: () {
                // TODO: handle navigation based on the title
                if (title == 'Home') {
                  // Navigate to home screen
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHome());
                } else if (title == 'Categories') {
                  // Navigate to categories
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToCategories());
                } else if (title == 'Help & Support') {
                  // Navigate to help & support
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHelpSupport());
                }
              },
            );
          }
        },
        separatorBuilder: (BuildContext context, int index) {
          return [0, 1].contains(index)
              ? const SizedBox.shrink()
              : Divider(
                  height: 1.0,
                  indent: screenWidth * 0.08,
                  endIndent: screenWidth * 0.08,
                  color: AppColors.secondaryGold,
                );
        },
      ),
    );
  }
}



===== lib/views/store/product_detail_view.dart =====
import 'package:carousel_slider/carousel_slider.dart';
import 'package:flutter/material.dart';
import 'package:frontend/services/store/product.dart';

class ProductDetailView extends StatelessWidget {
  final Product product;

  const ProductDetailView({required this.product, super.key});

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      appBar: AppBar(),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: EdgeInsets.only(
                left: screenWidth * 0.08,
                right: screenWidth * 0.08,
                top: screenHeight * 0.01,
              ),
              child: Text(
                product.title,
                style: const TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.w300,
                ),
              ),
            ),
            CarouselSlider(
              options: CarouselOptions(
                height: screenHeight * 0.7,
                viewportFraction: 0.98,
                enlargeCenterPage: true,
                enlargeStrategy: CenterPageEnlargeStrategy.height,
                enableInfiniteScroll: false,
              ),
              items: product.images.map(
                (image) {
                  return Builder(
                    builder: (context) {
                      return Image.asset(image, fit: BoxFit.contain);
                    },
                  );
                },
              ).toList(),
            ),
            Padding(
              padding: EdgeInsets.symmetric(
                vertical: 0.0,
                horizontal: screenWidth * 0.08,
              ),
              child: Text(
                '\$${product.unitPrice.toStringAsFixed(2)}',
                style: const TextStyle(
                  fontSize: 48,
                  fontWeight: FontWeight.normal,
                ),
              ),
            ),
            Padding(
              padding: EdgeInsets.only(
                top: screenWidth * 0.02,
                bottom: 0.0,
                left: screenWidth * 0.05,
                right: screenWidth * 0.05,
              ),
              child: Text(
                product.description,
                style: const TextStyle(
                  fontSize: 16,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}



===== lib/views/store/categories_view.dart =====



===== lib/views/store/main_store_view.dart =====
import 'package:flutter/material.dart';
import 'package:frontend/constants/app_colors.dart';
import 'package:frontend/widgets/custom_drawer.dart';
import 'package:frontend/widgets/custom_search_delegate.dart';
import 'package:frontend/services/store/product.dart';
import 'package:frontend/widgets/product_card.dart';

final List<Product> mockProducts = [
  Product(
    title: 'Fender Stratocaster',
    description: 'Classic electric guitar with a timeless sound.',
    category: 'Guitar',
    unitPrice: 1199.99,
    images: [
      'assets/images/fender-stratocaster/fender-stratocaster-1.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-2.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-3.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-4.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-5.jpg',
    ],
    sku: 'FEND-STRAT',
    slug: 'fender-stratocaster',
    inventory: 15,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    title: 'Gibson Les Paul',
    description: 'Iconic electric guitar known for its rich tone.',
    unitPrice: 2499.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-les-paul/gibson-les-paul-1.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-2.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-3.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-4.jpg',
    ],
    sku: 'GIBS-LESPAUL',
    slug: 'gibson-les-paul',
    inventory: 10,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    title: 'Fender Telecaster',
    description: 'Versatile electric guitar with a distinctive twang.',
    unitPrice: 999.99,
    category: 'Guitar',
    images: [
      'assets/images/fender-telecaster/fender-telecaster-1.jpeg',
    ],
    sku: 'FEND-TELE',
    slug: 'fender-telecaster',
    inventory: 8,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    title: 'Gibson SG',
    description: 'Classic electric guitar with a powerful sound.',
    unitPrice: 1999.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-sg/gibson-sg-1.jpeg',
    ],
    sku: 'GIBS-SG',
    slug: 'gibson-sg',
    inventory: 12,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    title: 'Shure SM58 Microphone',
    description: 'Legendary vocal microphone with excellent sound quality.',
    unitPrice: 99.99,
    category: 'Audio',
    images: [
      'assets/images/mic-shure/mic-shure-1.jpeg',
    ],
    sku: 'SHURE-SM58',
    slug: 'shure-sm58',
    inventory: 20,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: true,
  ),
  Product(
    title: 'Universal Audio Apollo Twin X',
    description: 'High-quality audio interface for professional recording.',
    unitPrice: 1299.99,
    category: 'Audio',
    images: [
      'assets/images/apollo-interface/apollo-interface-1.jpeg',
    ],
    sku: 'UA-APOLLO',
    slug: 'universal-audio-apollo-twin-x',
    inventory: 5,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: false,
  ),
  Product(
    title: 'Marshall JVM410H Amplifier',
    description: 'Versatile guitar amplifier with a wide range of tones.',
    unitPrice: 1999.99,
    category: 'Amplifier',
    images: [
      'assets/images/marshall-jvm410h/marshall-jvm410h-1.jpeg',
    ],
    sku: 'MARSH-JVM410H',
    slug: 'marshall-jvm410h',
    inventory: 7,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: true,
  ),
  Product(
    title: 'Orange Rockerverb 50 MKIII',
    description: 'Powerful and versatile guitar amplifier head.',
    unitPrice: 2499.99,
    category: 'Amplifier',
    images: [
      'assets/images/orange-rockerverb50-mkii/orange-rockerverb50-mkii-1.jpeg',
    ],
    sku: 'ORANGE-RV50',
    slug: 'orange-rockerverb50-mkii',
    inventory: 3,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: false,
  ),
];

class MainStoreView extends StatelessWidget {
  const MainStoreView({super.key});

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;

    final List<String> drawerItems = ['Home', 'Categories', 'Help & Support'];

    return Scaffold(
      appBar: AppBar(
        backgroundColor: AppColors.primaryBurgundy,
        title: const Align(
          alignment: Alignment.centerLeft,
          child: Text(
            'Charly Store',
            style: TextStyle(
              fontSize: 28.0,
              fontWeight: FontWeight.w400,
              color: AppColors.primaryCream,
            ),
          ),
        ),
        iconTheme: const IconThemeData(
          color: AppColors.primaryCream,
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: IconButton(
              icon: const Icon(Icons.search),
              onPressed: () {
                showSearch(
                  context: context,
                  delegate: CustomSearchDelegate(mockProducts),
                );
              },
            ),
          ),
        ],
      ),
      drawer: CustomDrawer(
        drawerItems: drawerItems,
      ),
      backgroundColor: AppColors.primaryCream,
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: GridView.builder(
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 8.0,
            mainAxisSpacing: 8.0,
            childAspectRatio: screenHeight / screenWidth * 0.55,
          ),
          itemCount: mockProducts.length,
          itemBuilder: (context, index) {
            return ProductCard(
              product: mockProducts[index],
            );
          },
        ),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(
    home: MainStoreView(),
  ));
}



===== lib/helpers/loading_screen_controller.dart =====
import 'package:flutter/foundation.dart' show immutable;

typedef CloseLoadingScreen = bool Function();
typedef UpdateLoadingScreen = bool Function(String text);

@immutable
class LoadingScreenController {
  final CloseLoadingScreen close;
  final UpdateLoadingScreen update;

  const LoadingScreenController({required this.close, required this.update});
}



===== lib/helpers/loading_screen.dart =====
import 'package:flutter/material.dart';
import 'dart:math';

import 'package:e_commerce_project/constants/app_colors.dart';

class LoadingScreen extends StatefulWidget {
  const LoadingScreen({super.key});

  @override
  _LoadingScreenState createState() => _LoadingScreenState();
}

class _LoadingScreenState extends State<LoadingScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.primaryCream,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            AnimatedBuilder(
              animation: _animation,
              builder: (_, child) {
                return Transform.rotate(
                  angle: _animation.value * 2 * pi,
                  child: child,
                );
              },
            ),
            const SizedBox(height: 24),
            const Text(
              'Audio Gear Catalog',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.primaryBurgundy,
              ),
            ),
            const SizedBox(height: 24),
            const SizedBox(
              width: 200,
              child: LinearProgressIndicator(
                valueColor:
                    AlwaysStoppedAnimation<Color>(AppColors.primaryBurgundy),
                backgroundColor: AppColors.secondaryGold,
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Loading your gear...',
              style: TextStyle(
                color: AppColors.secondaryGold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}



===== lib/services/bloc/navigation_states.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationState extends Equatable {
  const NavigationState({
    required this.isLoading,
    this.loadingText = 'Please wait a moment',
  });

  final bool isLoading;
  final String? loadingText;

  @override
  List<Object> get props => [isLoading, loadingText ?? ''];
}

class HomeState extends NavigationState {
  const HomeState({required super.isLoading});
}

class CategoriesState extends NavigationState {
  const CategoriesState({required super.isLoading});
}

class HelpSupportState extends NavigationState {
  const HelpSupportState({required super.isLoading});
}

class ProductDetailState extends NavigationState {
  final String productId;

  const ProductDetailState(this.productId) : super(isLoading: false);

  @override
  List<Object> get props => [productId, isLoading];
}



===== lib/services/bloc/navigation_events.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationEvent extends Equatable {
  const NavigationEvent();

  @override
  List<Object> get props => [];
}

class NavigateToHome extends NavigationEvent {}

class NavigateToCategories extends NavigationEvent {}

class NavigateToHelpSupport extends NavigationEvent {}

class NavigateToProductDetail extends NavigationEvent {
  final String productId;

  const NavigateToProductDetail(this.productId);

  @override
  List<Object> get props => [productId];
}



===== lib/services/bloc/navigation_bloc.dart =====
import 'package:flutter_bloc/flutter_bloc.dart';
import 'navigation_events.dart';
import 'navigation_states.dart';

class NavigationBloc extends Bloc<NavigationEvent, NavigationState> {
  NavigationBloc() : super(const HomeState(isLoading: false)) {
    on<NavigateToHome>(
        (event, emit) => emit(const HomeState(isLoading: false)));
    on<NavigateToCategories>(
        (event, emit) => emit(const CategoriesState(isLoading: false)));
    on<NavigateToHelpSupport>(
        (event, emit) => emit(const HelpSupportState(isLoading: false)));
    on<NavigateToProductDetail>(
        (event, emit) => emit(ProductDetailState(event.productId)));
  }
}



===== lib/services/store/product.dart =====
class Product {
  String title;
  String description;
  String category;
  double unitPrice;
  List<String> images;
  String sku;
  String slug;
  int inventory;
  DateTime lastUpdate;
  String productCollection;
  bool promotion;

  Product({
    required this.title,
    required this.description,
    required this.category,
    required this.unitPrice,
    required this.images,
    required this.sku,
    required this.slug,
    required this.inventory,
    required this.lastUpdate,
    required this.productCollection,
    required this.promotion,
  });
}



===== lib/utilities/no_paste_text_formatter.dart =====
import 'package:flutter/services.dart';

class NoPasteTextFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    if (newValue.text.length > oldValue.text.length + 1) {
      return oldValue;
    }
    return newValue;
  }
}



===== lib/main.dart =====
import 'package:e_commerce_project/views/store/categories_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/helpers/loading_screen.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/services/bloc/navigation_states.dart';
import 'package:e_commerce_project/views/store/main_store_view.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'services/bloc/navigation_bloc.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(
    MaterialApp(
      title: 'Charly Store',
      home: BlocProvider<NavigationBloc>(
        create: (context) => NavigationBloc(),
        child: const HomePage(),
      ),
    ),
  );
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    context.read<NavigationBloc>().add(NavigateToHome());
    return BlocConsumer<NavigationBloc, NavigationState>(
      listener: (context, state) {
        if (state.isLoading) {
          showDialog(
            context: context,
            barrierDismissible: false,
            builder: (BuildContext context) {
              return const LoadingScreen();
            },
          );
        } else {
          Navigator.of(context, rootNavigator: true).pop();
        }
      },
      builder: (context, state) {
        if (state is HomeState) {
          return const MainStoreView();
        } else if (state is CategoriesState) {
          return CategoriesView();
        } else if (state is HelpSupportState) {
          return const Scaffold(
            body: Text('Not yet implemented!!'),
          );
        } else {
          return const Scaffold(
            body: CircularProgressIndicator(),
          );
        }
      },
    );
  }
}



===== lib/constants/app_colors.dart =====
import 'package:flutter/material.dart';

class AppColors {
  // primary colors
  static const Color primaryBurgundy = Color.fromARGB(255, 92, 26, 27);
  static const Color primaryCream = Color.fromARGB(255, 245, 245, 220);

  // secondary colors
  static const Color secondaryGold = Color.fromARGB(255, 201, 163, 44);
  static const Color secondaryGreen = Color.fromARGB(255, 47, 79, 79);

  // accent colors
  static const Color accentBrown = Color.fromARGB(255, 139, 69, 19);
  static const Color accentGray = Color.fromARGB(255, 112, 128, 144);
}



===== lib/widgets/drawer_list_tile.dart =====
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';

class DrawerListTile extends StatelessWidget {
  final String title;
  final VoidCallback onTap;

  const DrawerListTile({
    super.key,
    required this.title,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Padding(
        padding: const EdgeInsets.only(
          left: 28.0,
          top: 8.0,
          bottom: 8.0,
        ),
        child: Text(
          title,
          style: const TextStyle(
            fontSize: 16.0,
            fontWeight: FontWeight.w100,
            color: AppColors.primaryBurgundy,
          ),
        ),
      ),
      onTap: onTap,
    );
  }
}



===== lib/widgets/product_card.dart =====
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';

class ProductCard extends StatelessWidget {
  final Product product;

  const ProductCard({
    required this.product,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        return Card(
          color: AppColors.primaryCream,
          shape: const RoundedRectangleBorder(
            side: BorderSide(
              color: AppColors.secondaryGold,
            ),
            borderRadius: BorderRadius.all(
              Radius.circular(8.0),
            ),
          ),
          elevation: 4.0,
          child: Column(
            children: [
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(
                    top: 8.0,
                    left: 8.0,
                    right: 8.0,
                  ),
                  child: ClipRRect(
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(8.0),
                      topRight: Radius.circular(8.0),
                    ),
                    child: Image.asset(
                      product.images[0],
                      fit: BoxFit.cover,
                      width: double.infinity,
                    ),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(
                  top: 8.0,
                  bottom: 8.0,
                  left: 12.0,
                ),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: Text(
                    product.title,
                    style: const TextStyle(
                      color: AppColors.primaryBurgundy,
                      fontWeight: FontWeight.bold,
                      fontSize: 18.0,
                    ),
                    maxLines: 2,
                  ),
                ),
              ),
              Container(
                padding: const EdgeInsets.all(8.0),
                margin: const EdgeInsets.symmetric(horizontal: 1.32),
                decoration: const BoxDecoration(
                  color: AppColors.secondaryGreen,
                  borderRadius: BorderRadius.only(
                    bottomLeft: Radius.circular(8.0),
                    bottomRight: Radius.circular(8.0),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        color: AppColors.primaryCream,
                        fontWeight: FontWeight.w100,
                        fontSize: 16.0,
                      ),
                    ),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.secondaryGold,
                        textStyle: const TextStyle(
                          color: AppColors.primaryBurgundy,
                        ),
                        shape: const LinearBorder(),
                      ),
                      onPressed: () {
                        // Handle button press
                      },
                      child: const Text('View'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}



===== lib/widgets/custom_search_delegate.dart =====
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';

class CustomSearchDelegate extends SearchDelegate {
  final List<Product> data;

  CustomSearchDelegate(this.data);

  //TODO change the font weight of the search prompt

  @override
  ThemeData appBarTheme(BuildContext context) {
    return ThemeData(
      appBarTheme: const AppBarTheme(
        backgroundColor: AppColors.primaryBurgundy,
        elevation: 10.0,
      ),
      iconTheme: const IconThemeData(color: AppColors.primaryCream),
      inputDecorationTheme: const InputDecorationTheme(
        hintStyle: TextStyle(color: Color.fromARGB(255, 131, 131, 131)),
        border: InputBorder.none,
      ),
    );
  }

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: IconButton(
          icon: const Icon(Icons.clear),
          color: AppColors.primaryCream,
          onPressed: () {
            if (query.isEmpty) {
              close(context, null);
            } else {
              query = '';
            }
          },
        ),
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const IconTheme(
        data: IconThemeData(size: 22.0),
        child: Icon(
          Icons.arrow_back,
          color: AppColors.primaryCream,
        ),
      ),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  TextStyle? get searchFieldStyle => const TextStyle(
        color: AppColors.primaryCream,
        fontSize: 18,
        fontWeight: FontWeight.w100,
      );

  @override
  Widget buildResults(BuildContext context) {
    final results = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();
    return ListView.builder(
      itemCount: results.length,
      itemBuilder: (context, index) {
        final product = results[index];
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Card(
            color: const Color(
                0xFFF5F5DC), // Background color similar to the image
            shape: RoundedRectangleBorder(
              side: const BorderSide(color: Color(0xFFC9A32C)), // Border color
              borderRadius: BorderRadius.circular(8.0), // Rounded corners
            ),
            child: ListTile(
              leading: Image.network(
                product.images[0],
                width: 50,
                height: 50,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.error),
              ),
              title: Text(
                product.title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF5C1A1B), // Text color
                ),
              ),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(product.category), // Displaying category (e.g., Guitars)
                  Text(
                    '\$${product.unitPrice}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.green, // Price color
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return Padding(
      padding: const EdgeInsets.only(top: 20.0),
      child: ListView.builder(
        itemCount: suggestions.length,
        itemBuilder: (context, index) {
          final product = suggestions[index];
          return Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 2.0),
            child: Card(
              color: const Color(0xFFF5F5DC), // Background color
              shape: RoundedRectangleBorder(
                side:
                    const BorderSide(color: Color(0xFFC9A32C)), // Border color
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: ListTile(
                leading: Image.network(
                  product.images[0],
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.error),
                ),
                title: Text(
                  product.title,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF5C1A1B),
                  ),
                ),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      product.category,
                    ), // Displaying category (e.g., Guitars)
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.green,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                onTap: () {
                  query = suggestions[index].title;
                  showResults(context);
                },
              ),
            ),
          );
        },
      ),
    );
  }
}



===== lib/widgets/custom_drawer.dart =====
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/widgets/drawer_list_tile.dart';

class CustomDrawer extends StatelessWidget {
  final List<String> drawerItems;

  const CustomDrawer({
    super.key,
    required this.drawerItems,
  });

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;

    return Drawer(
      backgroundColor: AppColors.primaryCream,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topRight: Radius.zero,
          bottomRight: Radius.zero,
        ),
      ),
      width: screenWidth * 0.7,
      child: ListView.separated(
        padding: EdgeInsets.zero,
        itemCount: drawerItems.length + 2, // +1 for the header & box
        itemBuilder: (context, index) {
          if (index == 0) {
            return Container(
              color: AppColors.primaryBurgundy,
              padding: const EdgeInsets.only(
                left: 18.0,
                top: 8.0,
                bottom: 10.0,
              ),
              child: const Text(
                'Charly Store',
                style: TextStyle(
                  color: AppColors.primaryCream,
                  fontSize: 28.0,
                  fontWeight: FontWeight.w400,
                ),
              ),
            );
          } else if (index == 1) {
            return const SizedBox(height: 22.0);
          } else {
            final title = drawerItems[index - 2];
            return DrawerListTile(
              title: title,
              onTap: () {
                // TODO: handle navigation based on the title
                if (title == 'Home') {
                  // Navigate to home screen
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHome());
                } else if (title == 'Categories') {
                  // Navigate to categories
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToCategories());
                } else if (title == 'Help & Support') {
                  // Navigate to help & support
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHelpSupport());
                }
              },
            );
          }
        },
        separatorBuilder: (BuildContext context, int index) {
          return [0, 1].contains(index)
              ? const SizedBox.shrink()
              : Divider(
                  height: 1.0,
                  indent: screenWidth * 0.08,
                  endIndent: screenWidth * 0.08,
                  color: AppColors.secondaryGold,
                );
        },
      ),
    );
  }
}



===== lib/views/store/product_detail_view.dart =====
import 'package:carousel_slider/carousel_slider.dart';
import 'package:flutter/material.dart';
import 'package:frontend/services/store/product.dart';

class ProductDetailView extends StatelessWidget {
  final Product product;

  const ProductDetailView({required this.product, super.key});

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      appBar: AppBar(),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: EdgeInsets.only(
                left: screenWidth * 0.08,
                right: screenWidth * 0.08,
                top: screenHeight * 0.01,
              ),
              child: Text(
                product.title,
                style: const TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.w300,
                ),
              ),
            ),
            CarouselSlider(
              options: CarouselOptions(
                height: screenHeight * 0.7,
                viewportFraction: 0.98,
                enlargeCenterPage: true,
                enlargeStrategy: CenterPageEnlargeStrategy.height,
                enableInfiniteScroll: false,
              ),
              items: product.images.map(
                (image) {
                  return Builder(
                    builder: (context) {
                      return Image.asset(image, fit: BoxFit.contain);
                    },
                  );
                },
              ).toList(),
            ),
            Padding(
              padding: EdgeInsets.symmetric(
                vertical: 0.0,
                horizontal: screenWidth * 0.08,
              ),
              child: Text(
                '\$${product.unitPrice.toStringAsFixed(2)}',
                style: const TextStyle(
                  fontSize: 48,
                  fontWeight: FontWeight.normal,
                ),
              ),
            ),
            Padding(
              padding: EdgeInsets.only(
                top: screenWidth * 0.02,
                bottom: 0.0,
                left: screenWidth * 0.05,
                right: screenWidth * 0.05,
              ),
              child: Text(
                product.description,
                style: const TextStyle(
                  fontSize: 16,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}



===== lib/views/store/categories_view.dart =====
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:e_commerce_project/constants/app_colors.dart';

class Category {
  final String name;
  final Icon icon;
  final int items;

  Category({required this.name, required this.icon, required this.items});
}

class CategoriesView extends StatelessWidget {
  final List<Category> categories = [
    Category(
        name: "Guitars", icon: const Icon(FontAwesomeIcons.guitar), items: 120),
    Category(
        name: "Audio",
        icon: const Icon(FontAwesomeIcons.headphones),
        items: 45),
    Category(
        name: "Amplifiers",
        icon: const Icon(FontAwesomeIcons.volumeHigh),
        items: 80),
    Category(
        name: "Effects Pedals",
        icon: const Icon(FontAwesomeIcons.sliders),
        items: 200),
    Category(
        name: "Accessories",
        icon: const Icon(FontAwesomeIcons.plane),
        items: 150),
  ];

  CategoriesView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor:
          const Color(0xFFF5F5DC), // Background color similar to the design
      appBar: AppBar(
        backgroundColor: AppColors.primaryBurgundy, // Header background color
        title: const Text(
          'Categories',
          style: TextStyle(
            color: Color(0xFFF5F5DC), // Header text color
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: ListView.builder(
          itemCount: categories.length,
          itemBuilder: (context, index) {
            final category = categories[index];
            return Card(
              color: const Color(0xFFF5F5DC), // Card background color
              shape: RoundedRectangleBorder(
                side: const BorderSide(
                    color: Color(0xFFC9A32C)), // Card border color
                borderRadius: BorderRadius.circular(10.0), // Card border radius
              ),
              child: ListTile(
                leading: const CircleAvatar(
                  backgroundColor:
                      Color(0xFF2F4F4F), // Circle icon background color
                  child: Icon(Icons.category,
                      color: Color(0xFFF5F5DC)), // Icon inside the circle
                ),
                title: Text(
                  category.name,
                  style: const TextStyle(
                    color: Color(0xFF5C1A1B), // Title text color
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                  ),
                ),
                subtitle: Text(
                  '${category.items} items',
                  style: const TextStyle(
                    color: Color(0xFF8B4513), // Subtitle text color
                    fontSize: 14,
                  ),
                ),
                trailing: const Icon(
                  Icons.chevron_right,
                  color: Color(0xFFC9A32C), // Trailing arrow color
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}



===== lib/views/store/main_store_view.dart =====
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/widgets/custom_drawer.dart';
import 'package:e_commerce_project/widgets/custom_search_delegate.dart';
import 'package:e_commerce_project/services/store/product.dart';
import 'package:e_commerce_project/widgets/product_card.dart';

final List<Product> mockProducts = [
  Product(
    title: 'Fender Stratocaster',
    description: 'Classic electric guitar with a timeless sound.',
    category: 'Guitar',
    unitPrice: 1199.99,
    images: [
      'assets/images/fender-stratocaster/fender-stratocaster-1.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-2.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-3.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-4.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-5.jpg',
    ],
    sku: 'FEND-STRAT',
    slug: 'fender-stratocaster',
    inventory: 15,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    title: 'Gibson Les Paul',
    description: 'Iconic electric guitar known for its rich tone.',
    unitPrice: 2499.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-les-paul/gibson-les-paul-1.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-2.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-3.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-4.jpg',
    ],
    sku: 'GIBS-LESPAUL',
    slug: 'gibson-les-paul',
    inventory: 10,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    title: 'Fender Telecaster',
    description: 'Versatile electric guitar with a distinctive twang.',
    unitPrice: 999.99,
    category: 'Guitar',
    images: [
      'assets/images/fender-telecaster/fender-telecaster-1.jpeg',
    ],
    sku: 'FEND-TELE',
    slug: 'fender-telecaster',
    inventory: 8,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    title: 'Gibson SG',
    description: 'Classic electric guitar with a powerful sound.',
    unitPrice: 1999.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-sg/gibson-sg-1.jpeg',
    ],
    sku: 'GIBS-SG',
    slug: 'gibson-sg',
    inventory: 12,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    title: 'Shure SM58 Microphone',
    description: 'Legendary vocal microphone with excellent sound quality.',
    unitPrice: 99.99,
    category: 'Audio',
    images: [
      'assets/images/mic-shure/mic-shure-1.jpeg',
    ],
    sku: 'SHURE-SM58',
    slug: 'shure-sm58',
    inventory: 20,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: true,
  ),
  Product(
    title: 'Universal Audio Apollo Twin X',
    description: 'High-quality audio interface for professional recording.',
    unitPrice: 1299.99,
    category: 'Audio',
    images: [
      'assets/images/apollo-interface/apollo-interface-1.jpeg',
    ],
    sku: 'UA-APOLLO',
    slug: 'universal-audio-apollo-twin-x',
    inventory: 5,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: false,
  ),
  Product(
    title: 'Marshall JVM410H Amplifier',
    description: 'Versatile guitar amplifier with a wide range of tones.',
    unitPrice: 1999.99,
    category: 'Amplifier',
    images: [
      'assets/images/marshall-jvm410h/marshall-jvm410h-1.jpeg',
    ],
    sku: 'MARSH-JVM410H',
    slug: 'marshall-jvm410h',
    inventory: 7,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: true,
  ),
  Product(
    title: 'Orange Rockerverb 50 MKIII',
    description: 'Powerful and versatile guitar amplifier head.',
    unitPrice: 2499.99,
    category: 'Amplifier',
    images: [
      'assets/images/orange-rockerverb50-mkii/orange-rockerverb50-mkii-1.jpeg',
    ],
    sku: 'ORANGE-RV50',
    slug: 'orange-rockerverb50-mkii',
    inventory: 3,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: false,
  ),
];

class MainStoreView extends StatelessWidget {
  const MainStoreView({super.key});

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;

    final List<String> drawerItems = ['Home', 'Categories', 'Help & Support'];

    return Scaffold(
      appBar: AppBar(
        backgroundColor: AppColors.primaryBurgundy,
        title: const Align(
          alignment: Alignment.centerLeft,
          child: Text(
            'Charly Store',
            style: TextStyle(
              fontSize: 28.0,
              fontWeight: FontWeight.w400,
              color: AppColors.primaryCream,
            ),
          ),
        ),
        iconTheme: const IconThemeData(
          color: AppColors.primaryCream,
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: IconButton(
              icon: const Icon(Icons.search),
              onPressed: () {
                showSearch(
                  context: context,
                  delegate: CustomSearchDelegate(mockProducts),
                );
              },
            ),
          ),
        ],
      ),
      drawer: CustomDrawer(
        drawerItems: drawerItems,
      ),
      backgroundColor: AppColors.primaryCream,
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: GridView.builder(
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 8.0,
            mainAxisSpacing: 8.0,
            childAspectRatio: screenHeight / screenWidth * 0.55,
          ),
          itemCount: mockProducts.length,
          itemBuilder: (context, index) {
            return ProductCard(
              product: mockProducts[index],
            );
          },
        ),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(
    home: MainStoreView(),
  ));
}



===== lib/helpers/loading_screen_controller.dart =====
import 'package:flutter/foundation.dart' show immutable;

typedef CloseLoadingScreen = bool Function();
typedef UpdateLoadingScreen = bool Function(String text);

@immutable
class LoadingScreenController {
  final CloseLoadingScreen close;
  final UpdateLoadingScreen update;

  const LoadingScreenController({required this.close, required this.update});
}



===== lib/helpers/loading_screen.dart =====
import 'package:flutter/material.dart';
import 'dart:math';

import 'package:e_commerce_project/constants/app_colors.dart';

class LoadingScreen extends StatefulWidget {
  const LoadingScreen({super.key});

  @override
  _LoadingScreenState createState() => _LoadingScreenState();
}

class _LoadingScreenState extends State<LoadingScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.primaryCream,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            AnimatedBuilder(
              animation: _animation,
              builder: (_, child) {
                return Transform.rotate(
                  angle: _animation.value * 2 * pi,
                  child: child,
                );
              },
            ),
            const SizedBox(height: 24),
            const Text(
              'Charly\'s Hideout',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.primaryBurgundy,
              ),
            ),
            const SizedBox(height: 24),
            const SizedBox(
              width: 200,
              child: LinearProgressIndicator(
                valueColor:
                    AlwaysStoppedAnimation<Color>(AppColors.primaryBurgundy),
                backgroundColor: AppColors.secondaryGold,
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Loading your gear...',
              style: TextStyle(
                color: AppColors.secondaryGold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}



===== lib/services/bloc/navigation_states.dart =====
import 'package:e_commerce_project/services/store/product.dart';
import 'package:equatable/equatable.dart';

abstract class NavigationState extends Equatable {
  const NavigationState();

  @override
  List<Object> get props => [];
}

class IsLoadingState extends NavigationState {
  const IsLoadingState();
}

class HomeState extends NavigationState {
  const HomeState();
}

class CategoriesState extends NavigationState {
  const CategoriesState();
}

class HelpSupportState extends NavigationState {
  const HelpSupportState();
}

class ProductDetailState extends NavigationState {
  final Product product;
  const ProductDetailState(this.product);

  @override
  List<Object> get props => [product];
}



===== lib/services/bloc/navigation_events.dart =====
import 'package:e_commerce_project/services/store/product.dart';
import 'package:equatable/equatable.dart';

abstract class NavigationEvent extends Equatable {
  const NavigationEvent();

  @override
  List<Object> get props => [];
}

class IsLoading extends NavigationEvent {}

class NavigateToHome extends NavigationEvent {}

class NavigateToCategories extends NavigationEvent {}

class NavigateToHelpSupport extends NavigationEvent {}

class NavigateToProductDetail extends NavigationEvent {
  final Product product;

  const NavigateToProductDetail(this.product);

  @override
  List<Object> get props => [product];
}



===== lib/services/bloc/navigation_bloc.dart =====
import 'package:flutter_bloc/flutter_bloc.dart';
import 'navigation_events.dart';
import 'navigation_states.dart';

class NavigationBloc extends Bloc<NavigationEvent, NavigationState> {
  NavigationBloc() : super(const HomeState()) {
    on<NavigateToHome>((event, emit) => emit(const HomeState()));

    on<NavigateToCategories>((event, emit) => emit(const CategoriesState()));

    on<NavigateToHelpSupport>((event, emit) => emit(const HelpSupportState()));

    on<IsLoading>((event, emit) => emit(const IsLoadingState()));

    on<NavigateToProductDetail>(
        (event, emit) => emit(ProductDetailState(event.product)));
  }
}



===== lib/services/store/product.dart =====
class Product {
  String id;
  String title;
  String description;
  String category;
  double unitPrice;
  List<String> images;
  String sku;
  String slug;
  int inventory;
  DateTime lastUpdate;
  String productCollection;
  bool promotion;
  List<String> features;

  Product({
    required this.id,
    required this.title,
    required this.description,
    required this.category,
    required this.unitPrice,
    required this.images,
    required this.sku,
    required this.slug,
    required this.inventory,
    required this.lastUpdate,
    required this.productCollection,
    required this.promotion,
    required this.features,
  });
}



===== lib/services/store/category.dart =====
import 'package:flutter/material.dart';

class Category {
  final String name;
  final Icon icon;
  final int items;

  Category({required this.name, required this.icon, required this.items});
}



===== lib/utilities/no_paste_text_formatter.dart =====
import 'package:flutter/services.dart';

class NoPasteTextFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    if (newValue.text.length > oldValue.text.length + 1) {
      return oldValue;
    }
    return newValue;
  }
}



===== lib/main.dart =====
import 'package:e_commerce_project/views/store/categories_view.dart';
import 'package:e_commerce_project/views/store/help_support_view.dart';
import 'package:e_commerce_project/views/store/product_detail_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/helpers/loading_screen.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/services/bloc/navigation_states.dart';
import 'package:e_commerce_project/views/store/main_store_view.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'services/bloc/navigation_bloc.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(
    MaterialApp(
      title: 'Charly\'s Hideout',
      home: BlocProvider<NavigationBloc>(
        create: (context) => NavigationBloc(),
        child: const HomePage(),
      ),
      debugShowCheckedModeBanner: false,
    ),
  );
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    context.read<NavigationBloc>().add(NavigateToHome());
    return BlocBuilder<NavigationBloc, NavigationState>(
      builder: (context, state) {
        if (state is HomeState) {
          return const MainStoreView();
        } else if (state is CategoriesState) {
          return CategoriesView();
        } else if (state is HelpSupportState) {
          return HelpSupportView();
        } else if (state is IsLoadingState) {
          return const LoadingScreen();
        } else if (state is ProductDetailState) {
          return ProductDetailView(product: state.product);
        } else {
          return const Scaffold(
            body: CircularProgressIndicator(),
          );
        }
      },
    );
  }
}



===== lib/constants/app_colors.dart =====
import 'package:flutter/material.dart';

class AppColors {
  // primary colors
  static const Color primaryBurgundy = Color.fromARGB(255, 92, 26, 27);
  static const Color primaryCream = Color.fromARGB(255, 245, 245, 220);

  // secondary colors
  static const Color secondaryGold = Color.fromARGB(255, 201, 163, 44);
  static const Color secondaryGreen = Color.fromARGB(255, 47, 79, 79);

  // accent colors
  static const Color accentBrown = Color.fromARGB(255, 139, 69, 19);
  static const Color accentGray = Color.fromARGB(255, 112, 128, 144);
}



===== lib/constants/drawer_items.dart =====
class DrawerItems {
  static const List<String> items = ['Home', 'Categories', 'Help & Support'];
}



===== lib/widgets/drawer_list_tile.dart =====
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';

class DrawerListTile extends StatelessWidget {
  final String title;
  final VoidCallback onTap;

  const DrawerListTile({
    super.key,
    required this.title,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Padding(
        padding: const EdgeInsets.only(
          left: 28.0,
          top: 8.0,
          bottom: 8.0,
        ),
        child: Text(
          title,
          style: const TextStyle(
            fontSize: 16.0,
            fontWeight: FontWeight.w100,
            color: AppColors.primaryBurgundy,
          ),
        ),
      ),
      onTap: onTap,
    );
  }
}



===== lib/widgets/product_card.dart =====
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class ProductCard extends StatelessWidget {
  final Product product;

  const ProductCard({
    required this.product,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        return Card(
          color: AppColors.primaryCream,
          shape: const RoundedRectangleBorder(
            side: BorderSide(
              color: AppColors.secondaryGold,
            ),
            borderRadius: BorderRadius.all(
              Radius.circular(8.0),
            ),
          ),
          elevation: 4.0,
          child: Column(
            children: [
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(
                    top: 8.0,
                    left: 8.0,
                    right: 8.0,
                  ),
                  child: ClipRRect(
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(8.0),
                      topRight: Radius.circular(8.0),
                    ),
                    child: Image.asset(
                      product.images[0],
                      fit: BoxFit.cover,
                      width: double.infinity,
                    ),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(
                  top: 8.0,
                  bottom: 8.0,
                  left: 12.0,
                ),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: Text(
                    product.title,
                    style: const TextStyle(
                      color: AppColors.primaryBurgundy,
                      fontWeight: FontWeight.bold,
                      fontSize: 18.0,
                    ),
                    maxLines: 2,
                  ),
                ),
              ),
              Container(
                padding: const EdgeInsets.all(8.0),
                margin: const EdgeInsets.symmetric(horizontal: 1.32),
                decoration: const BoxDecoration(
                  color: AppColors.secondaryGreen,
                  borderRadius: BorderRadius.only(
                    bottomLeft: Radius.circular(8.0),
                    bottomRight: Radius.circular(8.0),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        color: AppColors.primaryCream,
                        fontWeight: FontWeight.w100,
                        fontSize: 16.0,
                      ),
                    ),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.secondaryGold,
                        textStyle: const TextStyle(
                          color: AppColors.primaryBurgundy,
                        ),
                        shape: const LinearBorder(),
                      ),
                      onPressed: () {
                        BlocProvider.of<NavigationBloc>(context)
                            .add(NavigateToProductDetail(product));
                      },
                      child: const Text('View'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}



===== lib/widgets/base_scaffold.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/constants/drawer_items.dart';
import 'package:e_commerce_project/widgets/custom_drawer.dart';
import 'package:flutter/material.dart';

class BaseScaffold extends StatelessWidget {
  final Widget body;
  final String title;
  final List<Widget>? actions;
  final Widget? bottomNavigationBar;

  const BaseScaffold(
      {super.key,
      required this.body,
      required this.title,
      this.actions,
      this.bottomNavigationBar});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: AppColors.primaryBurgundy,
        title: Text(
          title,
          style: const TextStyle(
            color: AppColors.primaryCream,
            fontSize: 25,
            fontWeight: FontWeight.w400,
          ),
        ),
        iconTheme: const IconThemeData(
          color: AppColors.primaryCream,
        ),
        actions: actions,
      ),
      drawer: const CustomDrawer(drawerItems: DrawerItems.items),
      backgroundColor: AppColors.primaryCream,
      body: body,
      bottomNavigationBar: bottomNavigationBar,
    );
  }
}



===== lib/widgets/custom_search_delegate.dart =====
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class CustomSearchDelegate extends SearchDelegate {
  final List<Product> data;

  CustomSearchDelegate(this.data);

  //TODO change the font weight of the search prompt

  @override
  ThemeData appBarTheme(BuildContext context) {
    return ThemeData(
      appBarTheme: const AppBarTheme(
        backgroundColor: AppColors.primaryBurgundy,
        elevation: 10.0,
      ),
      iconTheme: const IconThemeData(color: AppColors.primaryCream),
      inputDecorationTheme: const InputDecorationTheme(
        hintStyle: TextStyle(color: Color.fromARGB(255, 131, 131, 131)),
        border: InputBorder.none,
      ),
    );
  }

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: IconButton(
          icon: const Icon(Icons.clear),
          color: AppColors.primaryCream,
          onPressed: () {
            if (query.isEmpty) {
              close(context, null);
            } else {
              query = '';
            }
          },
        ),
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const IconTheme(
        data: IconThemeData(size: 22.0),
        child: Icon(
          Icons.arrow_back,
          color: AppColors.primaryCream,
        ),
      ),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  TextStyle? get searchFieldStyle => const TextStyle(
        color: AppColors.primaryCream,
        fontSize: 18,
        fontWeight: FontWeight.w100,
      );

  @override
  Widget buildResults(BuildContext context) {
    final results = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();
    return ListView.builder(
      itemCount: results.length,
      itemBuilder: (context, index) {
        final product = results[index];
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Card(
            color:
                AppColors.primaryCream, // Background color similar to the image
            shape: RoundedRectangleBorder(
              side: const BorderSide(
                  color: AppColors.secondaryGold), // Border color
              borderRadius: BorderRadius.circular(8.0), // Rounded corners
            ),
            child: ListTile(
              leading: Image.network(
                product.images[0],
                width: 50,
                height: 50,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.error),
              ),
              title: Text(
                product.title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: AppColors.primaryBurgundy, // Text color
                ),
              ),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(product.category), // Displaying category (e.g., Guitars)
                  Text(
                    '\$${product.unitPrice}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      color: AppColors.secondaryGreen, // Price color
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              onTap: () {
                query = results[index].title;
                BlocProvider.of<NavigationBloc>(context)
                    .add(NavigateToProductDetail(product));
              },
            ),
          ),
        );
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return Padding(
      padding: const EdgeInsets.only(top: 20.0),
      child: ListView.builder(
        itemCount: suggestions.length,
        itemBuilder: (context, index) {
          final product = suggestions[index];
          return Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 2.0),
            child: Card(
              color: AppColors.primaryCream, // Background color
              shape: RoundedRectangleBorder(
                side:
                    const BorderSide(color: Color(0xFFC9A32C)), // Border color
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: ListTile(
                leading: Image.network(
                  product.images[0],
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.error),
                ),
                title: Text(
                  product.title,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: AppColors.primaryBurgundy,
                  ),
                ),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      product.category,
                    ),
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        color: AppColors.secondaryGreen,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                onTap: () {
                  query = suggestions[index].title;
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToProductDetail(product));
                },
              ),
            ),
          );
        },
      ),
    );
  }
}



===== lib/widgets/custom_drawer.dart =====
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/widgets/drawer_list_tile.dart';

class CustomDrawer extends StatelessWidget {
  final List<String> drawerItems;

  const CustomDrawer({
    super.key,
    required this.drawerItems,
  });

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;

    return Drawer(
      backgroundColor: AppColors.primaryCream,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topRight: Radius.zero,
          bottomRight: Radius.zero,
        ),
      ),
      width: screenWidth * 0.7,
      child: ListView.separated(
        padding: EdgeInsets.zero,
        itemCount: drawerItems.length + 2, // +1 for the header & box
        itemBuilder: (context, index) {
          if (index == 0) {
            return Container(
              color: AppColors.primaryBurgundy,
              padding: const EdgeInsets.only(
                left: 18.0,
                top: 8.0,
                bottom: 10.0,
              ),
              child: const Text(
                'Charly\'s Hideout',
                style: TextStyle(
                  color: AppColors.primaryCream,
                  fontSize: 28.0,
                  fontWeight: FontWeight.w400,
                ),
              ),
            );
          } else if (index == 1) {
            return const SizedBox(height: 22.0);
          } else {
            final title = drawerItems[index - 2];
            return DrawerListTile(
              title: title,
              onTap: () {
                // TODO: handle navigation based on the title
                if (title == 'Home') {
                  // Navigate to home screen
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHome());
                } else if (title == 'Categories') {
                  // Navigate to categories
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToCategories());
                } else if (title == 'Help & Support') {
                  // Navigate to help & support
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHelpSupport());
                }
              },
            );
          }
        },
        separatorBuilder: (BuildContext context, int index) {
          return [0, 1].contains(index)
              ? const SizedBox.shrink()
              : Divider(
                  height: 1.0,
                  indent: screenWidth * 0.08,
                  endIndent: screenWidth * 0.08,
                  color: AppColors.secondaryGold,
                );
        },
      ),
    );
  }
}



===== lib/views/store/product_detail_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/services/store/product.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

//TODO implement also in the search bar

class ProductDetailView extends StatelessWidget {
  final Product product;

  const ProductDetailView({super.key, required this.product});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Charly\'s Hideout',
          style: TextStyle(
            color: AppColors.primaryCream,
            fontSize: 25,
            fontWeight: FontWeight.w400,
          ),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          color: AppColors.primaryCream,
          onPressed: () {
            BlocProvider.of<NavigationBloc>(context).add(NavigateToHome());
          },
        ),
        backgroundColor: AppColors.primaryBurgundy,
        actions: const [],
      ),
      backgroundColor: AppColors.primaryCream,
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            AspectRatio(
              aspectRatio: 4 / 3,
              child: Image.network(
                product.images[0],
                fit: BoxFit.contain,
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    color: AppColors.secondaryGold,
                    child: const Center(
                      child: Icon(Icons.image_not_supported,
                          size: 50, color: AppColors.primaryBurgundy),
                    ),
                  );
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    product.title,
                    style: const TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: AppColors.primaryBurgundy),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    product.category,
                    style: const TextStyle(
                        fontSize: 16, color: AppColors.accentBrown),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        '\$${product.unitPrice.toStringAsFixed(2)}',
                        style: const TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: AppColors.secondaryGreen),
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  const Text(
                    'Description',
                    style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: AppColors.primaryBurgundy),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    product.description,
                    style: const TextStyle(
                        fontSize: 16, color: AppColors.accentBrown),
                  ),
                  const SizedBox(height: 24),
                  const Text(
                    'Specifications',
                    style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: AppColors.primaryBurgundy),
                  ),
                  const SizedBox(height: 8),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: product.features
                        .map<Widget>((spec) => Padding(
                              padding: const EdgeInsets.only(bottom: 4),
                              child: Text(
                                '• $spec',
                                style: const TextStyle(
                                    fontSize: 16, color: AppColors.accentBrown),
                              ),
                            ))
                        .toList(),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: Container(
        padding: const EdgeInsets.all(16),
        decoration: const BoxDecoration(
            color: AppColors.primaryCream,
            border: Border(
                top: BorderSide(
              color: AppColors.secondaryGold,
              width: 1.0,
            ))),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.secondaryGold,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          onPressed: () {
            // Implement add to cart functionality
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Thank You!')),
            );
          },
          child: const Text(
            'Send a Whatsapp to Charly',
            style: TextStyle(
              fontSize: 16,
              color: AppColors.primaryBurgundy,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
      ),
    );
  }
}



===== lib/views/store/categories_view.dart =====
import 'package:e_commerce_project/services/store/category.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:e_commerce_project/constants/app_colors.dart';

class CategoriesView extends StatelessWidget {
  final List<Category> categories = [
    Category(
        name: "Guitars", icon: const Icon(FontAwesomeIcons.guitar), items: 120),
    Category(
        name: "Audio",
        icon: const Icon(FontAwesomeIcons.headphones),
        items: 45),
    Category(
        name: "Amplifiers",
        icon: const Icon(FontAwesomeIcons.volumeHigh),
        items: 80),
    Category(
        name: "Effects Pedals",
        icon: const Icon(FontAwesomeIcons.sliders),
        items: 200),
    Category(
        name: "Accessories",
        icon: const Icon(FontAwesomeIcons.plane),
        items: 150),
  ];

  CategoriesView({super.key});

  @override
  Widget build(BuildContext context) {
    return BaseScaffold(
      title: 'Categories',
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: ListView.builder(
          itemCount: categories.length,
          itemBuilder: (context, index) {
            final category = categories[index];
            return Card(
              color: AppColors.primaryCream,
              shape: RoundedRectangleBorder(
                side: const BorderSide(color: AppColors.secondaryGold),
                borderRadius: BorderRadius.circular(10.0),
              ),
              child: ListTile(
                leading: const CircleAvatar(
                  backgroundColor: AppColors.secondaryGreen,
                  child: Icon(Icons.category, color: AppColors.primaryCream),
                ),
                title: Text(
                  category.name,
                  style: const TextStyle(
                    color: AppColors.primaryBurgundy,
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                  ),
                ),
                subtitle: Text(
                  '${category.items} items',
                  style: const TextStyle(
                    color: AppColors.primaryBurgundy,
                    fontSize: 14,
                  ),
                ),
                trailing: const Icon(
                  Icons.chevron_right,
                  color: AppColors.secondaryGold,
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}



===== lib/views/store/help_support_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';

class HelpSupportView extends StatelessWidget {
  final List<Map<String, String>> faqs = [
    {
      "question": "How do I place an order?",
      "answer":
          "To place an order, browse our catalog, select the items you want, add them to your cart, and proceed to checkout. Follow the prompts to enter your shipping and payment information."
    },
    {
      "question": "What payment methods do you accept?",
      "answer":
          "We accept major credit cards (Visa, MasterCard, American Express), PayPal, and Apple Pay."
    },
    {
      "question": "How long does shipping take?",
      "answer":
          "Shipping times vary depending on your location. Standard shipping typically takes 3-5 business days, while express shipping can take 1-2 business days."
    },
    {
      "question": "Do you offer international shipping?",
      "answer":
          "Yes, we offer international shipping to most countries. Shipping costs and delivery times may vary depending on the destination."
    },
    {
      "question": "What is your return policy?",
      "answer":
          "We offer a 30-day return policy for most items. Products must be in their original condition with all packaging and accessories. Please contact us to initiate a return."
    }
  ];

  HelpSupportView({super.key});

  @override
  Widget build(BuildContext context) {
    return BaseScaffold(
      title: 'Help & Support',
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Card(
                color: AppColors.primaryCream,
                shape: RoundedRectangleBorder(
                  side: const BorderSide(color: AppColors.secondaryGold),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Frequently Asked Questions',
                        style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: AppColors.primaryBurgundy),
                      ),
                      const SizedBox(height: 16),
                      ...faqs.map((faq) => ExpansionTile(
                            title: Text(faq['question']!,
                                style: const TextStyle(
                                    color: AppColors.primaryBurgundy)),
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(16),
                                child: Text(faq['answer']!,
                                    style: const TextStyle(
                                        color: AppColors.primaryBurgundy)),
                              ),
                            ],
                          )),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Card(
                color: AppColors.primaryCream,
                shape: RoundedRectangleBorder(
                  side: const BorderSide(color: AppColors.secondaryGold),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Padding(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Contact Us',
                        style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: AppColors.primaryBurgundy),
                      ),
                      SizedBox(height: 16),
                      Text(
                        'If you have any questions or concerns that aren\'t addressed in our FAQ, please don\'t hesitate to reach out to us via email.',
                        style: TextStyle(color: AppColors.primaryBurgundy),
                      ),
                      SizedBox(height: 16),
                      Row(
                        children: [
                          Icon(Icons.email, color: AppColors.secondaryGreen),
                          SizedBox(width: 8),
                          Text('support@audiogear.com',
                              style:
                                  TextStyle(color: AppColors.secondaryGreen)),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}



===== lib/views/store/main_store_view.dart =====
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/widgets/custom_search_delegate.dart';
import 'package:e_commerce_project/services/store/product.dart';
import 'package:e_commerce_project/widgets/product_card.dart';

final List<Product> mockProducts = [
  Product(
    id: '1',
    title: 'Fender Stratocaster',
    description: 'Classic electric guitar with a timeless sound.',
    category: 'Guitar',
    unitPrice: 1199.99,
    images: [
      'assets/images/fender-stratocaster/fender-stratocaster-1.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-2.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-3.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-4.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-5.jpg',
    ],
    sku: 'FEND-STRAT',
    slug: 'fender-stratocaster',
    inventory: 15,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
  ),
  Product(
    id: '2',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Gibson Les Paul',
    description: 'Iconic electric guitar known for its rich tone.',
    unitPrice: 2499.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-les-paul/gibson-les-paul-1.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-2.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-3.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-4.jpg',
    ],
    sku: 'GIBS-LESPAUL',
    slug: 'gibson-les-paul',
    inventory: 10,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    id: '3',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Fender Telecaster',
    description: 'Versatile electric guitar with a distinctive twang.',
    unitPrice: 999.99,
    category: 'Guitar',
    images: [
      'assets/images/fender-telecaster/fender-telecaster-1.jpeg',
    ],
    sku: 'FEND-TELE',
    slug: 'fender-telecaster',
    inventory: 8,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    id: '4',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Gibson SG',
    description: 'Classic electric guitar with a powerful sound.',
    unitPrice: 1999.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-sg/gibson-sg-1.jpeg',
    ],
    sku: 'GIBS-SG',
    slug: 'gibson-sg',
    inventory: 12,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    id: '5',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Shure SM58 Microphone',
    description: 'Legendary vocal microphone with excellent sound quality.',
    unitPrice: 99.99,
    category: 'Audio',
    images: [
      'assets/images/mic-shure/mic-shure-1.jpeg',
    ],
    sku: 'SHURE-SM58',
    slug: 'shure-sm58',
    inventory: 20,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: true,
  ),
  Product(
    id: '6',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Universal Audio Apollo Twin X',
    description: 'High-quality audio interface for professional recording.',
    unitPrice: 1299.99,
    category: 'Audio',
    images: [
      'assets/images/apollo-interface/apollo-interface-1.jpeg',
    ],
    sku: 'UA-APOLLO',
    slug: 'universal-audio-apollo-twin-x',
    inventory: 5,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: false,
  ),
  Product(
    id: '7',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Marshall JVM410H Amplifier',
    description: 'Versatile guitar amplifier with a wide range of tones.',
    unitPrice: 1999.99,
    category: 'Amplifier',
    images: [
      'assets/images/marshall-jvm410h/marshall-jvm410h-1.jpeg',
    ],
    sku: 'MARSH-JVM410H',
    slug: 'marshall-jvm410h',
    inventory: 7,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: true,
  ),
  Product(
    id: '8',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Orange Rockerverb 50 MKIII',
    description: 'Powerful and versatile guitar amplifier head.',
    unitPrice: 2499.99,
    category: 'Amplifier',
    images: [
      'assets/images/orange-rockerverb50-mkii/orange-rockerverb50-mkii-1.jpeg',
    ],
    sku: 'ORANGE-RV50',
    slug: 'orange-rockerverb50-mkii',
    inventory: 3,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: false,
  ),
];

class MainStoreView extends StatelessWidget {
  const MainStoreView({super.key});

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;

    return BaseScaffold(
      title: 'Charly\'s Hideout',
      actions: [
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: IconButton(
            icon: const Icon(Icons.search),
            onPressed: () {
              showSearch(
                context: context,
                delegate: CustomSearchDelegate(mockProducts),
              );
            },
          ),
        ),
      ],
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: GridView.builder(
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 8.0,
            mainAxisSpacing: 8.0,
            childAspectRatio: screenHeight / screenWidth * 0.55,
          ),
          itemCount: mockProducts.length,
          itemBuilder: (context, index) {
            return ProductCard(
              product: mockProducts[index],
            );
          },
        ),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(
    home: MainStoreView(),
  ));
}



===== lib/helpers/loading_screen_controller.dart =====
import 'package:flutter/foundation.dart' show immutable;

typedef CloseLoadingScreen = bool Function();
typedef UpdateLoadingScreen = bool Function(String text);

@immutable
class LoadingScreenController {
  final CloseLoadingScreen close;
  final UpdateLoadingScreen update;

  const LoadingScreenController({required this.close, required this.update});
}



===== lib/helpers/loading_screen.dart =====
import 'package:flutter/material.dart';
import 'dart:math';

import 'package:e_commerce_project/constants/app_colors.dart';

class LoadingScreen extends StatefulWidget {
  const LoadingScreen({super.key});

  @override
  _LoadingScreenState createState() => _LoadingScreenState();
}

class _LoadingScreenState extends State<LoadingScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.primaryCream,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            AnimatedBuilder(
              animation: _animation,
              builder: (_, child) {
                return Transform.rotate(
                  angle: _animation.value * 2 * pi,
                  child: child,
                );
              },
            ),
            const SizedBox(height: 24),
            const Text(
              'Charly\'s Hideout',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.primaryBurgundy,
              ),
            ),
            const SizedBox(height: 24),
            const SizedBox(
              width: 200,
              child: LinearProgressIndicator(
                valueColor:
                    AlwaysStoppedAnimation<Color>(AppColors.primaryBurgundy),
                backgroundColor: AppColors.secondaryGold,
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Loading your gear...',
              style: TextStyle(
                color: AppColors.secondaryGold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}



===== lib/services/bloc/navigation_states.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationState extends Equatable {
  const NavigationState();

  @override
  List<Object> get props => [];
}

class IsLoadingState extends NavigationState {
  const IsLoadingState();
}

class HomeState extends NavigationState {
  const HomeState();
}

class CategoriesState extends NavigationState {
  const CategoriesState();
}

class HelpSupportState extends NavigationState {
  const HelpSupportState();
}



===== lib/services/bloc/navigation_events.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationEvent extends Equatable {
  const NavigationEvent();

  @override
  List<Object> get props => [];
}

class IsLoading extends NavigationEvent {}

class NavigateToHome extends NavigationEvent {}

class NavigateToCategories extends NavigationEvent {}

class NavigateToHelpSupport extends NavigationEvent {}



===== lib/services/bloc/navigation_bloc.dart =====
import 'package:flutter_bloc/flutter_bloc.dart';
import 'navigation_events.dart';
import 'navigation_states.dart';

class NavigationBloc extends Bloc<NavigationEvent, NavigationState> {
  NavigationBloc() : super(const HomeState()) {
    on<NavigateToHome>((event, emit) => emit(const HomeState()));

    on<NavigateToCategories>((event, emit) => emit(const CategoriesState()));

    on<NavigateToHelpSupport>((event, emit) => emit(const HelpSupportState()));

    on<IsLoading>((event, emit) => emit(const IsLoadingState()));
  }
}



===== lib/services/store/product.dart =====
class Product {
  String id;
  String title;
  String description;
  String category;
  double unitPrice;
  List<String> images;
  String sku;
  String slug;
  int inventory;
  DateTime lastUpdate;
  String productCollection;
  bool promotion;
  List<String> features;

  Product({
    required this.id,
    required this.title,
    required this.description,
    required this.category,
    required this.unitPrice,
    required this.images,
    required this.sku,
    required this.slug,
    required this.inventory,
    required this.lastUpdate,
    required this.productCollection,
    required this.promotion,
    required this.features,
  });
}



===== lib/services/store/category.dart =====
import 'package:flutter/material.dart';

class Category {
  final String name;
  final Icon icon;
  final int items;

  Category({required this.name, required this.icon, required this.items});
}



===== lib/utilities/no_paste_text_formatter.dart =====
import 'package:flutter/services.dart';

class NoPasteTextFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    if (newValue.text.length > oldValue.text.length + 1) {
      return oldValue;
    }
    return newValue;
  }
}



===== lib/main.dart =====
import 'package:e_commerce_project/views/store/categories_view.dart';
import 'package:e_commerce_project/views/store/help_support_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/helpers/loading_screen.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/services/bloc/navigation_states.dart';
import 'package:e_commerce_project/views/store/main_store_view.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'services/bloc/navigation_bloc.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(
    MaterialApp(
      title: 'Charly\'s Hideout',
      home: BlocProvider<NavigationBloc>(
        create: (context) => NavigationBloc(),
        child: const HomePage(),
      ),
      debugShowCheckedModeBanner: false,
    ),
  );
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    context.read<NavigationBloc>().add(NavigateToHome());
    return BlocBuilder<NavigationBloc, NavigationState>(
      builder: (context, state) {
        if (state is HomeState) {
          return const MainStoreView();
        } else if (state is CategoriesState) {
          return CategoriesView();
        } else if (state is HelpSupportState) {
          return HelpSupportView();
        } else if (state is IsLoadingState) {
          return const LoadingScreen();
        } else {
          return const Scaffold(
            body: CircularProgressIndicator(),
          );
        }
      },
    );
  }
}



===== lib/constants/app_colors.dart =====
import 'package:flutter/material.dart';

class AppColors {
  // primary colors
  static const Color primaryBurgundy = Color.fromARGB(255, 92, 26, 27);
  static const Color primaryCream = Color.fromARGB(255, 245, 245, 220);

  // secondary colors
  static const Color secondaryGold = Color.fromARGB(255, 201, 163, 44);
  static const Color secondaryGreen = Color.fromARGB(255, 47, 79, 79);

  // accent colors
  static const Color accentBrown = Color.fromARGB(255, 139, 69, 19);
  static const Color accentGray = Color.fromARGB(255, 112, 128, 144);
}



===== lib/constants/drawer_items.dart =====
class DrawerItems {
  static const List<String> items = ['Home', 'Categories', 'Help & Support'];
}



===== lib/widgets/drawer_list_tile.dart =====
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';

class DrawerListTile extends StatelessWidget {
  final String title;
  final VoidCallback onTap;

  const DrawerListTile({
    super.key,
    required this.title,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Padding(
        padding: const EdgeInsets.only(
          left: 28.0,
          top: 8.0,
          bottom: 8.0,
        ),
        child: Text(
          title,
          style: const TextStyle(
            fontSize: 16.0,
            fontWeight: FontWeight.w100,
            color: AppColors.primaryBurgundy,
          ),
        ),
      ),
      onTap: onTap,
    );
  }
}



===== lib/widgets/product_card.dart =====
import 'package:e_commerce_project/views/store/product_detail_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';

class ProductCard extends StatelessWidget {
  final Product product;

  const ProductCard({
    required this.product,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        double maxWidth =
            constraints.maxWidth > 400 ? 400 : constraints.maxWidth;
        double maxHeight =
            constraints.maxHeight > 600 ? 600 : constraints.maxHeight;
        return Center(
          child: ConstrainedBox(
            constraints: BoxConstraints(
              maxWidth: maxWidth,
            ),
            child: Card(
              color: AppColors.primaryCream,
              shape: const RoundedRectangleBorder(
                side: BorderSide(
                  color: AppColors.secondaryGold,
                ),
                borderRadius: BorderRadius.all(
                  Radius.circular(8.0),
                ),
              ),
              elevation: 4.0,
              child: SizedBox(
                height: maxHeight,
                child: Column(
                  children: [
                    Expanded(
                      child: Padding(
                        padding: const EdgeInsets.only(
                          top: 8.0,
                          left: 8.0,
                          right: 8.0,
                        ),
                        child: ClipRRect(
                          borderRadius: const BorderRadius.only(
                            topLeft: Radius.circular(8.0),
                            topRight: Radius.circular(8.0),
                          ),
                          child: Image.asset(
                            product.images[0],
                            fit: BoxFit.cover,
                            width: double.infinity,
                          ),
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.only(
                        top: 8.0,
                        bottom: 8.0,
                        left: 12.0,
                      ),
                      child: Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          product.title,
                          style: const TextStyle(
                            color: AppColors.primaryBurgundy,
                            fontWeight: FontWeight.bold,
                            fontSize: 18.0,
                          ),
                          maxLines: 2,
                        ),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.all(8.0),
                      margin: const EdgeInsets.symmetric(horizontal: 1.32),
                      decoration: const BoxDecoration(
                        color: AppColors.secondaryGreen,
                        borderRadius: BorderRadius.only(
                          bottomLeft: Radius.circular(8.0),
                          bottomRight: Radius.circular(8.0),
                        ),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            '\$${product.unitPrice}',
                            style: const TextStyle(
                              color: AppColors.primaryCream,
                              fontWeight: FontWeight.w100,
                              fontSize: 16.0,
                            ),
                          ),
                          ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppColors.secondaryGold,
                              textStyle: const TextStyle(
                                color: AppColors.primaryBurgundy,
                              ),
                              shape: const LinearBorder(),
                            ),
                            onPressed: () {
                              Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                      builder: (context) =>
                                          ProductDetailView(product: product)));
                            },
                            child: const Text(
                              'View',
                              style: TextStyle(color: AppColors.primaryCream),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }
}



===== lib/widgets/base_scaffold.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/constants/drawer_items.dart';
import 'package:e_commerce_project/widgets/custom_drawer.dart';
import 'package:flutter/material.dart';

class BaseScaffold extends StatelessWidget {
  final Widget body;
  final String title;
  final List<Widget>? actions;
  final Widget? bottomNavigationBar;

  const BaseScaffold(
      {super.key,
      required this.body,
      required this.title,
      this.actions,
      this.bottomNavigationBar});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: AppColors.primaryBurgundy,
        title: Text(
          title,
          style: const TextStyle(
            color: AppColors.primaryCream,
            fontSize: 25,
            fontWeight: FontWeight.w400,
          ),
        ),
        iconTheme: const IconThemeData(
          color: AppColors.primaryCream,
        ),
        actions: actions,
      ),
      drawer: const CustomDrawer(drawerItems: DrawerItems.items),
      backgroundColor: AppColors.primaryCream,
      body: body,
      bottomNavigationBar: bottomNavigationBar,
    );
  }
}



===== lib/widgets/custom_search_delegate.dart =====
import 'package:e_commerce_project/views/store/product_detail_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';

class CustomSearchDelegate extends SearchDelegate {
  final List<Product> data;

  CustomSearchDelegate(this.data);

  @override
  ThemeData appBarTheme(BuildContext context) {
    return ThemeData(
      appBarTheme: const AppBarTheme(
        backgroundColor: AppColors.primaryBurgundy,
        elevation: 10.0,
      ),
      iconTheme: const IconThemeData(color: AppColors.primaryCream),
      inputDecorationTheme: const InputDecorationTheme(
        hintStyle: TextStyle(color: Color.fromARGB(255, 131, 131, 131)),
        border: InputBorder.none,
      ),
    );
  }

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: IconButton(
          icon: const Icon(Icons.clear),
          color: AppColors.primaryCream,
          onPressed: () {
            if (query.isEmpty) {
              close(context, null);
            } else {
              query = '';
            }
          },
        ),
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const IconTheme(
        data: IconThemeData(size: 22.0),
        child: Icon(
          Icons.arrow_back,
          color: AppColors.primaryCream,
        ),
      ),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  TextStyle? get searchFieldStyle => const TextStyle(
        color: AppColors.primaryCream,
        fontSize: 18,
        fontWeight: FontWeight.w100,
      );

  @override
  Widget buildResults(BuildContext context) {
    final results = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();
    return ListView.builder(
      itemCount: results.length,
      itemBuilder: (context, index) {
        final product = results[index];
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Card(
            color:
                AppColors.primaryCream, // Background color similar to the image
            shape: RoundedRectangleBorder(
              side: const BorderSide(
                  color: AppColors.secondaryGold), // Border color
              borderRadius: BorderRadius.circular(8.0), // Rounded corners
            ),
            child: ListTile(
              leading: Image.network(
                product.images[0],
                width: 50,
                height: 50,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.error),
              ),
              title: Text(
                product.title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: AppColors.primaryBurgundy, // Text color
                ),
              ),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(product.category),
                  Text(
                    '\$${product.unitPrice}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      color: AppColors.secondaryGreen, // Price color
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              onTap: () {
                query = results[index].title;
                Navigator.push(
                    context,
                    MaterialPageRoute(
                        builder: (context) =>
                            ProductDetailView(product: product)));
              },
            ),
          ),
        );
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return Container(
      color: AppColors.primaryCream,
      child: ListView.builder(
        itemCount: suggestions.length,
        itemBuilder: (context, index) {
          final product = suggestions[index];
          return Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 2.0),
            child: Card(
              color: AppColors.primaryCream,
              shape: RoundedRectangleBorder(
                side: const BorderSide(color: AppColors.secondaryGold),
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: ListTile(
                leading: Image.network(
                  product.images[0],
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.error),
                ),
                title: Text(
                  product.title,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: AppColors.primaryBurgundy,
                  ),
                ),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      product.category,
                    ),
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        color: AppColors.secondaryGreen,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                onTap: () {
                  query = suggestions[index].title;
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) =>
                              ProductDetailView(product: product)));
                },
              ),
            ),
          );
        },
      ),
    );
  }
}



===== lib/widgets/custom_drawer.dart =====
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/widgets/drawer_list_tile.dart';

class CustomDrawer extends StatelessWidget {
  final List<String> drawerItems;

  const CustomDrawer({
    super.key,
    required this.drawerItems,
  });

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;

    return Drawer(
      backgroundColor: AppColors.primaryCream,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topRight: Radius.zero,
          bottomRight: Radius.zero,
        ),
      ),
      width: screenWidth * 0.7,
      child: ListView.separated(
        padding: EdgeInsets.zero,
        itemCount: drawerItems.length + 2, // +2 for the header & box
        itemBuilder: (context, index) {
          if (index == 0) {
            return Container(
              color: AppColors.primaryBurgundy,
              padding: const EdgeInsets.only(
                left: 18.0,
                top: 8.0,
                bottom: 10.0,
              ),
              child: const Text(
                'Charly\'s Hideout',
                style: TextStyle(
                  color: AppColors.primaryCream,
                  fontSize: 28.0,
                  fontWeight: FontWeight.w400,
                ),
              ),
            );
          } else if (index == 1) {
            return const SizedBox(height: 22.0);
          } else {
            final title = drawerItems[index - 2];
            return DrawerListTile(
              title: title,
              onTap: () {
                if (title == 'Home') {
                  // Navigate to home screen
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHome());
                } else if (title == 'Categories') {
                  // Navigate to categories
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToCategories());
                } else if (title == 'Help & Support') {
                  // Navigate to help & support
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHelpSupport());
                }
              },
            );
          }
        },
        separatorBuilder: (BuildContext context, int index) {
          return [0, 1].contains(index)
              ? const SizedBox.shrink()
              : Divider(
                  height: 1.0,
                  indent: screenWidth * 0.08,
                  endIndent: screenWidth * 0.08,
                  color: AppColors.secondaryGold,
                );
        },
      ),
    );
  }
}



===== lib/views/store/single_category_view.dart =====



===== lib/views/store/product_detail_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/services/store/product.dart';

class ProductDetailView extends StatelessWidget {
  final Product product;

  const ProductDetailView({super.key, required this.product});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Charly\'s Hideout',
          style: TextStyle(
            color: AppColors.primaryCream,
            fontSize: 25,
            fontWeight: FontWeight.w400,
          ),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          color: AppColors.primaryCream,
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        backgroundColor: AppColors.primaryBurgundy,
        actions: const [],
      ),
      backgroundColor: AppColors.primaryCream,
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            AspectRatio(
              aspectRatio: 4 / 3,
              child: Image.network(
                product.images[0],
                fit: BoxFit.contain,
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    color: AppColors.secondaryGold,
                    child: const Center(
                      child: Icon(Icons.image_not_supported,
                          size: 50, color: AppColors.primaryBurgundy),
                    ),
                  );
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    product.title,
                    style: const TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: AppColors.primaryBurgundy),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    product.category,
                    style: const TextStyle(
                        fontSize: 16, color: AppColors.accentBrown),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        '\$${product.unitPrice.toStringAsFixed(2)}',
                        style: const TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: AppColors.secondaryGreen),
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  const Text(
                    'Description',
                    style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: AppColors.primaryBurgundy),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    product.description,
                    style: const TextStyle(
                        fontSize: 16, color: AppColors.accentBrown),
                  ),
                  const SizedBox(height: 24),
                  const Text(
                    'Specifications',
                    style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: AppColors.primaryBurgundy),
                  ),
                  const SizedBox(height: 8),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: product.features
                        .map<Widget>((spec) => Padding(
                              padding: const EdgeInsets.only(bottom: 4),
                              child: Text(
                                '• $spec',
                                style: const TextStyle(
                                    fontSize: 16, color: AppColors.accentBrown),
                              ),
                            ))
                        .toList(),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: Container(
        padding: const EdgeInsets.all(16),
        decoration: const BoxDecoration(
            color: AppColors.primaryCream,
            border: Border(
                top: BorderSide(
              color: AppColors.secondaryGold,
              width: 1.0,
            ))),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.secondaryGold,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          onPressed: () {
            // Implement add to cart functionality
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Thank You!')),
            );
          },
          child: const Text(
            'Send a Whatsapp to Charly',
            style: TextStyle(
              fontSize: 16,
              color: AppColors.primaryBurgundy,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
      ),
    );
  }
}



===== lib/views/store/categories_view.dart =====
import 'package:e_commerce_project/services/store/category.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:e_commerce_project/constants/app_colors.dart';

class CategoriesView extends StatelessWidget {
  final List<Category> categories = [
    Category(
        name: "Guitars", icon: const Icon(FontAwesomeIcons.guitar), items: 120),
    Category(
        name: "Audio",
        icon: const Icon(FontAwesomeIcons.headphones),
        items: 45),
    Category(
        name: "Amplifiers",
        icon: const Icon(FontAwesomeIcons.volumeHigh),
        items: 80),
    Category(
        name: "Effects Pedals",
        icon: const Icon(FontAwesomeIcons.sliders),
        items: 200),
    Category(
        name: "Accessories",
        icon: const Icon(FontAwesomeIcons.plane),
        items: 150),
  ];

  CategoriesView({super.key});

  @override
  Widget build(BuildContext context) {
    return BaseScaffold(
      title: 'Categories',
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: ListView.builder(
          itemCount: categories.length,
          itemBuilder: (context, index) {
            final category = categories[index];
            return Card(
              color: AppColors.primaryCream,
              shape: RoundedRectangleBorder(
                side: const BorderSide(color: AppColors.secondaryGold),
                borderRadius: BorderRadius.circular(10.0),
              ),
              child: ListTile(
                leading: const CircleAvatar(
                  backgroundColor: AppColors.secondaryGreen,
                  child: Icon(Icons.category, color: AppColors.primaryCream),
                ),
                title: Text(
                  category.name,
                  style: const TextStyle(
                    color: AppColors.primaryBurgundy,
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                  ),
                ),
                subtitle: Text(
                  '${category.items} items',
                  style: const TextStyle(
                    color: AppColors.primaryBurgundy,
                    fontSize: 14,
                  ),
                ),
                trailing: const Icon(
                  Icons.chevron_right,
                  color: AppColors.secondaryGold,
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}



===== lib/views/store/help_support_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';

class HelpSupportView extends StatelessWidget {
  final List<Map<String, String>> faqs = [
    {
      "question": "How do I place an order?",
      "answer":
          "To place an order, browse our catalog, select the items you want, add them to your cart, and proceed to checkout. Follow the prompts to enter your shipping and payment information."
    },
    {
      "question": "What payment methods do you accept?",
      "answer":
          "We accept major credit cards (Visa, MasterCard, American Express), PayPal, and Apple Pay."
    },
    {
      "question": "How long does shipping take?",
      "answer":
          "Shipping times vary depending on your location. Standard shipping typically takes 3-5 business days, while express shipping can take 1-2 business days."
    },
    {
      "question": "Do you offer international shipping?",
      "answer":
          "Yes, we offer international shipping to most countries. Shipping costs and delivery times may vary depending on the destination."
    },
    {
      "question": "What is your return policy?",
      "answer":
          "We offer a 30-day return policy for most items. Products must be in their original condition with all packaging and accessories. Please contact us to initiate a return."
    }
  ];

  HelpSupportView({super.key});

  @override
  Widget build(BuildContext context) {
    return BaseScaffold(
      title: 'Help & Support',
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Card(
                color: AppColors.primaryCream,
                shape: RoundedRectangleBorder(
                  side: const BorderSide(color: AppColors.secondaryGold),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Frequently Asked Questions',
                        style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: AppColors.primaryBurgundy),
                      ),
                      const SizedBox(height: 16),
                      ...faqs.map((faq) => ExpansionTile(
                            title: Text(faq['question']!,
                                style: const TextStyle(
                                    color: AppColors.primaryBurgundy)),
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(16),
                                child: Text(faq['answer']!,
                                    style: const TextStyle(
                                        color: AppColors.primaryBurgundy)),
                              ),
                            ],
                          )),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Card(
                color: AppColors.primaryCream,
                shape: RoundedRectangleBorder(
                  side: const BorderSide(color: AppColors.secondaryGold),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Padding(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Contact Us',
                        style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: AppColors.primaryBurgundy),
                      ),
                      SizedBox(height: 16),
                      Text(
                        'If you have any questions or concerns that aren\'t addressed in our FAQ, please don\'t hesitate to reach out to us via email.',
                        style: TextStyle(color: AppColors.primaryBurgundy),
                      ),
                      SizedBox(height: 16),
                      Row(
                        children: [
                          Icon(Icons.email, color: AppColors.secondaryGreen),
                          SizedBox(width: 8),
                          Text('support@audiogear.com',
                              style:
                                  TextStyle(color: AppColors.secondaryGreen)),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}



===== lib/views/store/main_store_view.dart =====
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/widgets/custom_search_delegate.dart';
import 'package:e_commerce_project/services/store/product.dart';
import 'package:e_commerce_project/widgets/product_card.dart';

final List<Product> mockProducts = [
  Product(
    id: '1',
    title: 'Fender Stratocaster',
    description: 'Classic electric guitar with a timeless sound.',
    category: 'Guitar',
    unitPrice: 1199.99,
    images: [
      'assets/images/fender-stratocaster/fender-stratocaster-1.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-2.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-3.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-4.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-5.jpg',
    ],
    sku: 'FEND-STRAT',
    slug: 'fender-stratocaster',
    inventory: 15,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
  ),
  Product(
    id: '2',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Gibson Les Paul',
    description: 'Iconic electric guitar known for its rich tone.',
    unitPrice: 2499.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-les-paul/gibson-les-paul-1.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-2.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-3.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-4.jpg',
    ],
    sku: 'GIBS-LESPAUL',
    slug: 'gibson-les-paul',
    inventory: 10,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    id: '3',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Fender Telecaster',
    description: 'Versatile electric guitar with a distinctive twang.',
    unitPrice: 999.99,
    category: 'Guitar',
    images: [
      'assets/images/fender-telecaster/fender-telecaster-1.jpeg',
    ],
    sku: 'FEND-TELE',
    slug: 'fender-telecaster',
    inventory: 8,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    id: '4',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Gibson SG',
    description: 'Classic electric guitar with a powerful sound.',
    unitPrice: 1999.99,
    category: 'Guitar',
    images: [
      'assets/images/gibson-sg/gibson-sg-1.jpeg',
    ],
    sku: 'GIBS-SG',
    slug: 'gibson-sg',
    inventory: 12,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    id: '5',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Shure SM58 Microphone',
    description: 'Legendary vocal microphone with excellent sound quality.',
    unitPrice: 99.99,
    category: 'Audio',
    images: [
      'assets/images/mic-shure/mic-shure-1.jpeg',
    ],
    sku: 'SHURE-SM58',
    slug: 'shure-sm58',
    inventory: 20,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: true,
  ),
  Product(
    id: '6',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Universal Audio Apollo Twin X',
    description: 'High-quality audio interface for professional recording.',
    unitPrice: 1299.99,
    category: 'Audio',
    images: [
      'assets/images/apollo-interface/apollo-interface-1.jpeg',
    ],
    sku: 'UA-APOLLO',
    slug: 'universal-audio-apollo-twin-x',
    inventory: 5,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: false,
  ),
  Product(
    id: '7',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Marshall JVM410H Amplifier',
    description: 'Versatile guitar amplifier with a wide range of tones.',
    unitPrice: 1999.99,
    category: 'Amplifier',
    images: [
      'assets/images/marshall-jvm410h/marshall-jvm410h-1.jpeg',
    ],
    sku: 'MARSH-JVM410H',
    slug: 'marshall-jvm410h',
    inventory: 7,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: true,
  ),
  Product(
    id: '8',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Orange Rockerverb 50 MKIII',
    description: 'Powerful and versatile guitar amplifier head.',
    unitPrice: 2499.99,
    category: 'Amplifier',
    images: [
      'assets/images/orange-rockerverb50-mkii/orange-rockerverb50-mkii-1.jpeg',
    ],
    sku: 'ORANGE-RV50',
    slug: 'orange-rockerverb50-mkii',
    inventory: 3,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: false,
  ),
];

class MainStoreView extends StatelessWidget {
  const MainStoreView({super.key});

  @override
  Widget build(BuildContext context) {
    return BaseScaffold(
      title: 'Charly\'s Hideout',
      actions: [
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: IconButton(
            icon: const Icon(Icons.search),
            onPressed: () {
              showSearch(
                context: context,
                delegate: CustomSearchDelegate(mockProducts),
              );
            },
          ),
        ),
      ],
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: LayoutBuilder(
          builder: (context, constraints) {
            double screenWidth = constraints.maxWidth;
            double screenHeight = constraints.maxHeight;

            int crossAxisCount;
            double childAspectRatio;

            if (screenWidth > 650) {
              crossAxisCount = 4;
            } else if (screenWidth > 525) {
              crossAxisCount = 3;
            } else {
              crossAxisCount = 2;
            }

            childAspectRatio =
                (screenHeight / screenWidth * 0.3).clamp(0.5, 0.8);

            return GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: crossAxisCount,
                crossAxisSpacing: 8.0,
                mainAxisSpacing: 8.0,
                childAspectRatio: childAspectRatio,
              ),
              itemCount: mockProducts.length,
              itemBuilder: (context, index) {
                return ProductCard(
                  product: mockProducts[index],
                );
              },
            );
          },
        ),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(
    home: MainStoreView(),
  ));
}



===== lib/helpers/loading_screen_controller.dart =====
import 'package:flutter/foundation.dart' show immutable;

typedef CloseLoadingScreen = bool Function();
typedef UpdateLoadingScreen = bool Function(String text);

@immutable
class LoadingScreenController {
  final CloseLoadingScreen close;
  final UpdateLoadingScreen update;

  const LoadingScreenController({required this.close, required this.update});
}



===== lib/helpers/loading_screen.dart =====
import 'package:flutter/material.dart';
import 'dart:math';

import 'package:e_commerce_project/constants/app_colors.dart';

class LoadingScreen extends StatefulWidget {
  const LoadingScreen({super.key});

  @override
  _LoadingScreenState createState() => _LoadingScreenState();
}

class _LoadingScreenState extends State<LoadingScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.primaryCream,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            AnimatedBuilder(
              animation: _animation,
              builder: (_, child) {
                return Transform.rotate(
                  angle: _animation.value * 2 * pi,
                  child: child,
                );
              },
            ),
            const SizedBox(height: 24),
            const Text(
              'Charly\'s Hideout',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.primaryBurgundy,
              ),
            ),
            const SizedBox(height: 24),
            const SizedBox(
              width: 200,
              child: LinearProgressIndicator(
                valueColor:
                    AlwaysStoppedAnimation<Color>(AppColors.primaryBurgundy),
                backgroundColor: AppColors.secondaryGold,
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Loading your gear...',
              style: TextStyle(
                color: AppColors.secondaryGold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}



===== lib/services/cache/categories_cache.dart =====
import 'package:e_commerce_project/services/store/category.dart';

class CategoriesCache {
  static final CategoriesCache _instance = CategoriesCache._internal();
  factory CategoriesCache() => _instance;
  CategoriesCache._internal();

  final Map<String, Category> _cache = {};

  void initializeCache(List<Category> categories) {
    for (var category in categories) {
      _cache[category.id] = category;
    }
  }

  Category? getCategory(String id) {
    return _cache[id];
  }

  void clearCache() {
    _cache.clear();
  }

  bool containsCategory(String id) {
    return _cache.containsKey(id);
  }

  List<Category> getAllCategories() {
    return _cache.values.toList();
  }
}



===== lib/services/cache/product_cache.dart =====
import 'package:e_commerce_project/services/store/product.dart';

class ProductCache {
  static final ProductCache _instance = ProductCache._internal();
  factory ProductCache() => _instance;
  ProductCache._internal();

  // categoryId, list of all the products in the category
  final Map<String, List<Product>> _cache = {};

  void initializeCache(List<Product> products) {
    for (var product in products) {
      _cache[product.category]?.add(product);
    }
  }

  List<Product>? getAllProducts() {
    return _cache.values.expand((element) => element).toList();
  }

  List<Product>? getProducts(String categoryId) {
    return _cache[categoryId];
  }

  void setProducts(String categoryId, List<Product> products) {
    _cache[categoryId] = products;
  }
}



===== lib/services/bloc/navigation_states.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationState extends Equatable {
  const NavigationState();

  @override
  List<Object> get props => [];
}

class IsLoadingState extends NavigationState {
  const IsLoadingState();
}

class HomeState extends NavigationState {
  const HomeState();
}

class StoreState extends NavigationState {
  const StoreState();
}

class CategoriesState extends NavigationState {
  const CategoriesState();
}

class HelpSupportState extends NavigationState {
  const HelpSupportState();
}



===== lib/services/bloc/navigation_events.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationEvent extends Equatable {
  const NavigationEvent();

  @override
  List<Object> get props => [];
}

class IsLoading extends NavigationEvent {}

class NavigateToHome extends NavigationEvent {}

class NavigateToStore extends NavigationEvent {}

class NavigateToCategories extends NavigationEvent {}

class NavigateToHelpSupport extends NavigationEvent {}



===== lib/services/bloc/navigation_bloc.dart =====
import 'package:flutter_bloc/flutter_bloc.dart';
import 'navigation_events.dart';
import 'navigation_states.dart';

class NavigationBloc extends Bloc<NavigationEvent, NavigationState> {
  NavigationBloc() : super(const HomeState()) {
    on<NavigateToHome>((event, emit) => emit(const HomeState()));

    on<NavigateToStore>(
      (event, emit) => emit(const StoreState()),
    );

    on<NavigateToCategories>((event, emit) => emit(const CategoriesState()));

    on<NavigateToHelpSupport>((event, emit) => emit(const HelpSupportState()));

    on<IsLoading>((event, emit) => emit(const IsLoadingState()));
  }
}



===== lib/services/store/product.dart =====
class Product {
  String id;
  String title;
  String description;
  String category;
  String subCategory;
  double unitPrice;
  List<String> images;
  String sku;
  String slug;
  int inventory;
  DateTime lastUpdate;
  String productCollection;
  bool promotion;
  List<String> features;

  Product({
    required this.id,
    required this.title,
    required this.description,
    required this.category,
    required this.subCategory,
    required this.unitPrice,
    required this.images,
    required this.sku,
    required this.slug,
    required this.inventory,
    required this.lastUpdate,
    required this.productCollection,
    required this.promotion,
    required this.features,
  });
}



===== lib/services/store/category.dart =====
class Category {
  final String id;
  final String name;
  final int items;
  final List<Category> subCategories;

  Category({
    required this.id,
    required this.name,
    required this.items,
    this.subCategories = const [],
  });
}



===== lib/utilities/no_paste_text_formatter.dart =====
import 'package:flutter/services.dart';

class NoPasteTextFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    if (newValue.text.length > oldValue.text.length + 1) {
      return oldValue;
    }
    return newValue;
  }
}



===== lib/main.dart =====
import 'package:e_commerce_project/constants/text_themes/app_text_themes.dart';
import 'package:e_commerce_project/mock/mock_categories.dart';
import 'package:e_commerce_project/mock/mock_products.dart';
import 'package:e_commerce_project/services/cache/categories_cache.dart';
import 'package:e_commerce_project/services/cache/product_cache.dart';
import 'package:e_commerce_project/views/categories_view.dart';
import 'package:e_commerce_project/views/help_support_view.dart';
import 'package:e_commerce_project/views/home/home_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/helpers/loading_screen.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/services/bloc/navigation_states.dart';
import 'package:e_commerce_project/views/store/main_store_view.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'services/bloc/navigation_bloc.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  CategoriesCache().initializeCache(mockCategories);
  ProductCache().initializeCache(mockProducts);
  runApp(
    MaterialApp(
      title: 'Charly\'s Hideout',
      home: BlocProvider<NavigationBloc>(
        create: (context) => NavigationBloc(),
        child: const HomePage(),
      ),
      debugShowCheckedModeBanner: false,
      theme: ThemeData(textTheme: AppTextThemes.lightTextTheme),
    ),
  );
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    context.read<NavigationBloc>().add(NavigateToHome());
    return BlocBuilder<NavigationBloc, NavigationState>(
      builder: (context, state) {
        if (state is HomeState) {
          return const HomePageView();
        } else if (state is StoreState) {
          return const StoreView();
        } else if (state is CategoriesState) {
          return const CategoriesView();
        } else if (state is HelpSupportState) {
          return HelpSupportView();
        } else if (state is IsLoadingState) {
          return const LoadingScreen();
        } else {
          return const Scaffold(
            body: CircularProgressIndicator(),
          );
        }
      },
    );
  }
}



===== lib/constants/app_colors.dart =====
import 'package:flutter/material.dart';

class AppColors {
  // primary colors
  static const Color primaryBurgundy = Color.fromARGB(255, 92, 26, 27);
  static const Color primaryCream = Color.fromARGB(255, 245, 245, 220);

  // secondary colors
  static const Color secondaryGold = Color.fromARGB(255, 201, 163, 44);
  static const Color secondaryGreen = Color.fromARGB(255, 47, 79, 79);

  // accent colors
  static const Color accentBrown = Color.fromARGB(255, 139, 69, 19);
  static const Color accentGray = Color.fromARGB(255, 112, 128, 144);
}



===== lib/constants/drawer_items.dart =====
class DrawerItems {
  static const List<String> items = [
    'Home',
    'Store',
    'Categories',
    'Help & Support',
  ];
}



===== lib/constants/text_themes/app_text_themes.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class AppTextThemes {
  static final TextTheme lightTextTheme = TextTheme(
      // Drawer & App Title
      titleLarge: GoogleFonts.playfairDisplay(
        color: AppColors.primaryCream,
        fontSize: 28.0,
        fontWeight: FontWeight.w400,
      ),
      // Drawer items
      titleMedium: GoogleFonts.playfairDisplay(
        fontSize: 18.0,
        fontWeight: FontWeight.w600,
        color: AppColors.primaryBurgundy,
      ),
      // Product card title
      // Copied with size 20 for H&S dropdown titles
      titleSmall: GoogleFonts.playfairDisplay(
        color: AppColors.primaryBurgundy,
        fontWeight: FontWeight.bold,
        fontSize: 16.0,
      ),
      // Prices
      // Copied with fontSize: 20.0 for the product card
      labelMedium: GoogleFonts.playfairDisplay(
        color: AppColors.secondaryGreen,
        fontWeight: FontWeight.w300,
        fontSize: 28.0,
      ),
      // Buttons
      labelSmall: GoogleFonts.playfairDisplay(
        color: AppColors.primaryCream,
        fontSize: 15.0,
      ),
      // Product detail title
      bodyLarge: GoogleFonts.playfairDisplay(
        color: AppColors.primaryBurgundy,
        fontWeight: FontWeight.bold,
        fontSize: 24.0,
      ),
      // Product detail headings (description, characteristics, etc.)
      headlineSmall: GoogleFonts.playfairDisplay(
        fontSize: 20,
        fontWeight: FontWeight.bold,
        color: AppColors.primaryBurgundy,
      ),
      // Body text
      bodySmall: GoogleFonts.inter(
        fontSize: 16,
        color: AppColors.accentBrown,
      ),
      // Contact e-mail
      displaySmall: GoogleFonts.inter(
        color: AppColors.secondaryGreen,
        fontWeight: FontWeight.w600,
        fontSize: 14.0,
      ));
}



===== lib/widgets/drawer_list_tile.dart =====
import 'package:flutter/material.dart';

class DrawerListTile extends StatelessWidget {
  final String title;
  final VoidCallback onTap;

  const DrawerListTile({
    super.key,
    required this.title,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Padding(
        padding: const EdgeInsets.only(
          left: 28.0,
          top: 8.0,
          bottom: 8.0,
        ),
        child: Text(
          title,
          style: Theme.of(context).textTheme.titleMedium,
        ),
      ),
      onTap: onTap,
    );
  }
}



===== lib/widgets/item_grid.dart =====
import 'package:e_commerce_project/services/store/product.dart';
import 'package:e_commerce_project/widgets/product_card.dart';
import 'package:flutter/material.dart';

// Displays the item grid, getting the items and the categoryId
// as an optional parameter. That is so that the widget can be
// used to show not only the products of a certain category but
// all the products.
class ItemGrid extends StatelessWidget {
  final String? categoryId;
  final List<Product> items;

  const ItemGrid({
    super.key,
    required this.items,
    this.categoryId,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: LayoutBuilder(
        builder: (context, constraints) {
          double screenWidth = constraints.maxWidth;
          double screenHeight = constraints.maxHeight;

          int crossAxisCount;
          double childAspectRatio;

          if (screenWidth > 650) {
            crossAxisCount = 4;
          } else if (screenWidth > 525) {
            crossAxisCount = 3;
          } else {
            crossAxisCount = 2;
          }

          childAspectRatio = (screenHeight / screenWidth * 0.3).clamp(0.5, 0.8);

          return GridView.builder(
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: crossAxisCount,
              crossAxisSpacing: 8.0,
              mainAxisSpacing: 8.0,
              childAspectRatio: childAspectRatio,
            ),
            itemCount: items.length,
            itemBuilder: (context, index) {
              return ProductCard(
                product: items.elementAt(index),
              );
            },
          );
        },
      ),
    );
  }
}



===== lib/widgets/product_card.dart =====
import 'package:e_commerce_project/views/store/product_detail_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';

class ProductCard extends StatelessWidget {
  final Product product;

  const ProductCard({
    required this.product,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        double maxWidth =
            constraints.maxWidth > 400 ? 400 : constraints.maxWidth;
        double maxHeight =
            constraints.maxHeight > 600 ? 600 : constraints.maxHeight;
        return Center(
          child: ConstrainedBox(
            constraints: BoxConstraints(
              maxWidth: maxWidth,
            ),
            child: Card(
              color: AppColors.primaryCream,
              shape: const RoundedRectangleBorder(
                side: BorderSide(
                  color: AppColors.secondaryGold,
                ),
                borderRadius: BorderRadius.all(
                  Radius.circular(8.0),
                ),
              ),
              elevation: 4.0,
              child: SizedBox(
                height: maxHeight,
                child: Column(
                  children: [
                    Expanded(
                      child: Padding(
                        padding: const EdgeInsets.only(
                          top: 8.0,
                          left: 8.0,
                          right: 8.0,
                        ),
                        child: ClipRRect(
                          borderRadius: const BorderRadius.only(
                            topLeft: Radius.circular(8.0),
                            topRight: Radius.circular(8.0),
                          ),
                          child: Image.asset(
                            product.images[0],
                            fit: BoxFit.cover,
                            width: double.infinity,
                          ),
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.only(
                        top: 8.0,
                        bottom: 8.0,
                        left: 12.0,
                      ),
                      child: Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          product.title,
                          style: Theme.of(context).textTheme.titleSmall,
                          maxLines: 2,
                        ),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.all(8.0),
                      decoration: const BoxDecoration(
                        color: AppColors.secondaryGreen,
                        borderRadius: BorderRadius.only(
                          bottomLeft: Radius.circular(8.0),
                          bottomRight: Radius.circular(8.0),
                        ),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            '\$${product.unitPrice}',
                            style: Theme.of(context)
                                .textTheme
                                .labelMedium
                                ?.copyWith(
                                  color: AppColors.primaryCream,
                                  fontSize: 18.0,
                                ),
                          ),
                          ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppColors.secondaryGold,
                              textStyle:
                                  Theme.of(context).textTheme.labelMedium,
                              shape: const LinearBorder(),
                            ),
                            onPressed: () {
                              Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                      builder: (context) =>
                                          ProductDetailView(product: product)));
                            },
                            child: Text(
                              'View',
                              style: Theme.of(context).textTheme.labelSmall,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }
}



===== lib/widgets/base_scaffold.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/constants/drawer_items.dart';
import 'package:e_commerce_project/widgets/custom_drawer.dart';
import 'package:flutter/material.dart';

class BaseScaffold extends StatelessWidget {
  final Widget body;
  final String title;
  final List<Widget>? actions;
  final Widget? bottomNavigationBar;
  final Widget? bottomSheet;

  const BaseScaffold({
    super.key,
    required this.body,
    required this.title,
    this.actions,
    this.bottomNavigationBar,
    this.bottomSheet,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: AppColors.primaryBurgundy,
        title: Text(title, style: Theme.of(context).textTheme.titleLarge),
        iconTheme: const IconThemeData(
          color: AppColors.primaryCream,
        ),
        actions: actions,
      ),
      drawer: const CustomDrawer(drawerItems: DrawerItems.items),
      backgroundColor: AppColors.primaryCream,
      body: body,
      bottomNavigationBar: bottomNavigationBar,
      bottomSheet: bottomSheet,
    );
  }
}



===== lib/widgets/custom_search_delegate.dart =====
import 'package:e_commerce_project/views/store/product_detail_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';

class CustomSearchDelegate extends SearchDelegate {
  final List<Product> data;

  CustomSearchDelegate(this.data);

  @override
  ThemeData appBarTheme(BuildContext context) {
    return ThemeData(
      appBarTheme: const AppBarTheme(
        backgroundColor: AppColors.primaryBurgundy,
        elevation: 10.0,
      ),
      iconTheme: const IconThemeData(color: AppColors.primaryCream),
      inputDecorationTheme: const InputDecorationTheme(
        hintStyle: TextStyle(color: Color.fromARGB(255, 131, 131, 131)),
        border: InputBorder.none,
      ),
    );
  }

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: IconButton(
          icon: const Icon(Icons.clear),
          color: AppColors.primaryCream,
          onPressed: () {
            if (query.isEmpty) {
              close(context, null);
            } else {
              query = '';
            }
          },
        ),
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const IconTheme(
        data: IconThemeData(size: 22.0),
        child: Icon(
          Icons.arrow_back,
          color: AppColors.primaryCream,
        ),
      ),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  TextStyle? get searchFieldStyle => const TextStyle(
        color: AppColors.primaryCream,
        fontSize: 18,
        fontWeight: FontWeight.w100,
      );

  @override
  Widget buildResults(BuildContext context) {
    final results = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();
    return ListView.builder(
      itemCount: results.length,
      itemBuilder: (context, index) {
        final product = results[index];
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Card(
            color:
                AppColors.primaryCream, // Background color similar to the image
            shape: RoundedRectangleBorder(
              side: const BorderSide(
                  color: AppColors.secondaryGold), // Border color
              borderRadius: BorderRadius.circular(8.0), // Rounded corners
            ),
            child: ListTile(
              leading: Image.network(
                product.images[0],
                width: 50,
                height: 50,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.error),
              ),
              title: Text(
                product.title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: AppColors.primaryBurgundy, // Text color
                ),
              ),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(product.category),
                  Text(
                    '\$${product.unitPrice}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      color: AppColors.secondaryGreen, // Price color
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              onTap: () {
                query = results[index].title;
                Navigator.push(
                    context,
                    MaterialPageRoute(
                        builder: (context) =>
                            ProductDetailView(product: product)));
              },
            ),
          ),
        );
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return Container(
      color: AppColors.primaryCream,
      child: ListView.builder(
        itemCount: suggestions.length,
        itemBuilder: (context, index) {
          final product = suggestions[index];
          return Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 2.0),
            child: Card(
              color: AppColors.primaryCream,
              shape: RoundedRectangleBorder(
                side: const BorderSide(color: AppColors.secondaryGold),
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: ListTile(
                leading: Image.network(
                  product.images[0],
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.error),
                ),
                title: Text(
                  product.title,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: AppColors.primaryBurgundy,
                  ),
                ),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      product.category,
                    ),
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        color: AppColors.secondaryGreen,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                onTap: () {
                  query = suggestions[index].title;
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) =>
                              ProductDetailView(product: product)));
                },
              ),
            ),
          );
        },
      ),
    );
  }
}



===== lib/widgets/custom_drawer.dart =====
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/widgets/drawer_list_tile.dart';

class CustomDrawer extends StatelessWidget {
  final List<String> drawerItems;

  const CustomDrawer({
    super.key,
    required this.drawerItems,
  });

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;

    return Drawer(
      backgroundColor: AppColors.primaryCream,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topRight: Radius.zero,
          bottomRight: Radius.zero,
        ),
      ),
      width: screenWidth * 0.7,
      child: ListView.separated(
        padding: EdgeInsets.zero,
        itemCount: drawerItems.length + 2, // +2 for the header & box
        itemBuilder: (context, index) {
          if (index == 0) {
            return Container(
              color: AppColors.primaryBurgundy,
              padding: const EdgeInsets.only(
                left: 18.0,
                top: 8.0,
                bottom: 10.0,
              ),
              child: Text('Charly\'s Hideout',
                  style: Theme.of(context).textTheme.titleLarge),
            );
          } else if (index == 1) {
            return const SizedBox(height: 22.0);
          } else {
            final title = drawerItems[index - 2];
            return DrawerListTile(
              title: title,
              onTap: () {
                if (title == 'Home') {
                  // Navigate to home screen
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHome());
                } else if (title == 'Store') {
                  // Navigate to store
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToStore());
                } else if (title == 'Categories') {
                  // Navigate to categories
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToCategories());
                } else if (title == 'Help & Support') {
                  // Navigate to help & support
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHelpSupport());
                }
              },
            );
          }
        },
        separatorBuilder: (BuildContext context, int index) {
          return [0, 1].contains(index)
              ? const SizedBox.shrink()
              : Divider(
                  height: 1.0,
                  indent: screenWidth * 0.08,
                  endIndent: screenWidth * 0.08,
                  color: AppColors.secondaryGold,
                );
        },
      ),
    );
  }
}



===== lib/mock/mock_categories.dart =====
import 'package:e_commerce_project/services/store/category.dart';

final List<Category> mockCategories = [
  Category(
    id: "1",
    name: "Guitars",
    items: 120,
    subCategories: [
      Category(id: "2", name: "Electric Guitars", items: 60),
      Category(id: "3", name: "Acoustic Guitars", items: 40),
      Category(id: "4", name: "Bass Guitars", items: 20),
    ],
  ),
  Category(
    id: "5",
    name: "Audio",
    items: 45,
    subCategories: [
      Category(id: "6", name: "Headphones", items: 25),
      Category(id: "7", name: "Speakers", items: 20),
    ],
  ),
  Category(
    id: "8",
    name: "Amplifiers",
    items: 80,
    subCategories: [
      Category(id: "9", name: "Guitar Amps", items: 50),
      Category(id: "10", name: "Bass Amps", items: 30),
    ],
  ),
  Category(
    id: "11",
    name: "Effects Pedals",
    items: 200,
    subCategories: [
      Category(id: "12", name: "Distortion", items: 70),
      Category(id: "13", name: "Reverb", items: 50),
      Category(id: "14", name: "Delay", items: 80),
    ],
  ),
  Category(
    id: "15",
    name: "Accessories",
    items: 150,
    subCategories: [
      Category(id: "16", name: "Strings", items: 50),
      Category(id: "17", name: "Cables", items: 50),
      Category(id: "18", name: "Stands", items: 50),
    ],
  ),
];



===== lib/mock/mock_products.dart =====
import 'package:e_commerce_project/services/store/product.dart';

final List<Product> mockProducts = [
  Product(
    id: '1',
    title: 'Fender Stratocaster',
    description: 'Classic electric guitar with a timeless sound.',
    category: '1',
    subCategory: '2',
    unitPrice: 1199.99,
    images: [
      'assets/images/fender-stratocaster/fender-stratocaster-1.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-2.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-3.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-4.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-5.jpg',
    ],
    sku: 'FEND-STRAT',
    slug: 'fender-stratocaster',
    inventory: 15,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
  ),
  Product(
    id: '2',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Gibson Les Paul',
    description: 'Iconic electric guitar known for its rich tone.',
    unitPrice: 2499.99,
    category: 'Guitar',
    subCategory: '2',
    images: [
      'assets/images/gibson-les-paul/gibson-les-paul-1.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-2.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-3.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-4.jpg',
    ],
    sku: 'GIBS-LESPAUL',
    slug: 'gibson-les-paul',
    inventory: 10,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    id: '3',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Fender Telecaster',
    description: 'Versatile electric guitar with a distinctive twang.',
    unitPrice: 999.99,
    category: '1',
    subCategory: '2',
    images: [
      'assets/images/fender-telecaster/fender-telecaster-1.jpeg',
    ],
    sku: 'FEND-TELE',
    slug: 'fender-telecaster',
    inventory: 8,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    id: '4',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Gibson SG',
    description: 'Classic electric guitar with a powerful sound.',
    unitPrice: 1999.99,
    category: '1',
    subCategory: '2',
    images: [
      'assets/images/gibson-sg/gibson-sg-1.jpeg',
    ],
    sku: 'GIBS-SG',
    slug: 'gibson-sg',
    inventory: 12,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    id: '5',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Shure SM58 Microphone',
    description: 'Legendary vocal microphone with excellent sound quality.',
    unitPrice: 99.99,
    category: '5',
    subCategory: '7',
    images: [
      'assets/images/mic-shure/mic-shure-1.jpeg',
    ],
    sku: 'SHURE-SM58',
    slug: 'shure-sm58',
    inventory: 20,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: true,
  ),
  Product(
    id: '6',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Universal Audio Apollo Twin X',
    description: 'High-quality audio interface for professional recording.',
    unitPrice: 1299.99,
    category: '5',
    subCategory: '6',
    images: [
      'assets/images/apollo-interface/apollo-interface-1.jpeg',
    ],
    sku: 'UA-APOLLO',
    slug: 'universal-audio-apollo-twin-x',
    inventory: 5,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: false,
  ),
  Product(
    id: '7',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Marshall JVM410H Amplifier',
    description: 'Versatile guitar amplifier with a wide range of tones.',
    unitPrice: 1999.99,
    category: '8',
    subCategory: '9',
    images: [
      'assets/images/marshall-jvm410h/marshall-jvm410h-1.jpeg',
    ],
    sku: 'MARSH-JVM410H',
    slug: 'marshall-jvm410h',
    inventory: 7,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: true,
  ),
  Product(
    id: '8',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Orange Rockerverb 50 MKIII',
    description: 'Powerful and versatile guitar amplifier head.',
    unitPrice: 2499.99,
    category: '8',
    subCategory: '9',
    images: [
      'assets/images/orange-rockerverb50-mkii/orange-rockerverb50-mkii-1.jpeg',
    ],
    sku: 'ORANGE-RV50',
    slug: 'orange-rockerverb50-mkii',
    inventory: 3,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: false,
  ),
];



===== lib/mock/mock_faqs.dart =====
// TODO complete


===== lib/views/home/home_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/views/home/build_category_card.dart';
import 'package:e_commerce_project/views/home/contact_info.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

class HomePageView extends StatelessWidget {
  const HomePageView({super.key});

  @override
  Widget build(BuildContext context) {
    return BaseScaffold(
      title: 'Charly\'s Hideout',
      body: ListView(
        children: [
          // Welcome section
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                const Text(
                  "Your Audio Gear Specialist",
                  style: TextStyle(
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                      color: AppColors.primaryBurgundy),
                ),
                const SizedBox(height: 10),
                const Text(
                  "Expert repairs and premium sales since 2016",
                  style:
                      TextStyle(fontSize: 18, color: AppColors.secondaryGreen),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.secondaryGold,
                        textStyle: const TextStyle(
                            color: AppColors.primaryBurgundy,
                            fontWeight: FontWeight.bold),
                      ),
                      onPressed: () {},
                      child: const Text("Our Services"),
                    ),
                    const SizedBox(width: 10),
                    OutlinedButton(
                      style: OutlinedButton.styleFrom(
                        side: const BorderSide(color: AppColors.secondaryGold),
                        backgroundColor: Colors.transparent,
                      ),
                      onPressed: () {},
                      child: const Text(
                        "Browse Catalog",
                        style: TextStyle(color: AppColors.primaryBurgundy),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          const SizedBox(height: 20),

          // Tabs Section
          DefaultTabController(
            length: 2,
            child: Column(
              children: [
                const TabBar(
                  indicatorColor: AppColors.primaryBurgundy,
                  tabs: [
                    Tab(
                        child: Text('Repairs',
                            style:
                                TextStyle(color: AppColors.primaryBurgundy))),
                    Tab(
                        child: Text('Sales',
                            style:
                                TextStyle(color: AppColors.primaryBurgundy))),
                  ],
                ),
                SizedBox(
                  height: 300,
                  child: TabBarView(
                    children: [
                      // Repairs Tab
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Card(
                          color: AppColors.primaryCream,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                            side: const BorderSide(
                                color: AppColors.secondaryGold),
                          ),
                          child: const Padding(
                            padding: EdgeInsets.all(16.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Expert Repairs",
                                  style: TextStyle(
                                      fontSize: 24,
                                      fontWeight: FontWeight.bold,
                                      color: AppColors.primaryBurgundy),
                                ),
                                SizedBox(height: 10),
                                Text(
                                  "We specialize in repairing all types of audio equipment, from vintage amplifiers to modern digital interfaces. Our home-based workshop is equipped to handle a wide range of issues.",
                                  style: TextStyle(
                                      color: AppColors.secondaryGreen),
                                ),
                                SizedBox(height: 10),
                                Text("• Amplifier and speaker repairs",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Guitar and bass setups",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Microphone and preamp servicing",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Vintage equipment restoration",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                              ],
                            ),
                          ),
                        ),
                      ),
                      // Sales Tab
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Card(
                          color: AppColors.primaryCream,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                            side: const BorderSide(
                                color: AppColors.secondaryGold),
                          ),
                          child: const Padding(
                            padding: EdgeInsets.all(16.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Quality Sales",
                                  style: TextStyle(
                                      fontSize: 24,
                                      fontWeight: FontWeight.bold,
                                      color: AppColors.primaryBurgundy),
                                ),
                                SizedBox(height: 10),
                                Text(
                                  "We offer a curated selection of high-quality audio equipment, both new and vintage. Our inventory is hand-picked to ensure the best value and performance for our customers.",
                                  style: TextStyle(
                                      color: AppColors.secondaryGreen),
                                ),
                                SizedBox(height: 10),
                                Text("• Professional-grade microphones",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Boutique and vintage amplifiers",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• High-end studio monitors",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Rare and collectible instruments",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),

          // Featured Categories Section
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "Featured Categories",
                  style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: AppColors.primaryBurgundy),
                ),
                const SizedBox(height: 10),
                GridView.count(
                  crossAxisCount: 3,
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  children: [
                    buildCategoryCard(
                        FontAwesomeIcons.guitar, 'Guitars & Basses'),
                    buildCategoryCard(
                        FontAwesomeIcons.microphone, 'Effect Pedals'),
                    buildCategoryCard(
                        FontAwesomeIcons.headphones, 'Audio Gear'),
                  ],
                ),
              ],
            ),
          ),

          // About Section
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Card(
              color: AppColors.primaryCream,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
                side: const BorderSide(color: AppColors.secondaryGold),
              ),
              child: const Padding(
                padding: EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      "About Audio Gear Haven",
                      style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: AppColors.primaryBurgundy),
                    ),
                    SizedBox(height: 10),
                    Text(
                      "Founded in 2016 by an experienced audio engineer, Audio Gear Haven has been serving the La Plata music community from our home-based workshop.",
                      style: TextStyle(color: AppColors.secondaryGreen),
                    ),
                    SizedBox(height: 10),
                    Text(
                      '"Incredible service and expertise. My vintage amp has never sounded better!" - Maria L.',
                      style: TextStyle(
                          fontStyle: FontStyle.italic,
                          color: AppColors.accentBrown),
                    ),
                  ],
                ),
              ),
            ),
          ),

          // Contact Section
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "Get in Touch",
                  style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: AppColors.primaryBurgundy),
                ),
                const SizedBox(height: 10),
                Card(
                  color: AppColors.primaryCream,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                    side: const BorderSide(color: Color(0xFFC9A32C)),
                  ),
                  child: const Padding(
                    padding: EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        ContactInfo(
                            icon: FontAwesomeIcons.phone,
                            text: "+54 221 542 4184"),
                        ContactInfo(
                            icon: FontAwesomeIcons.locationDot,
                            text: "La Plata, Buenos Aires"),
                        ContactInfo(
                            icon: FontAwesomeIcons.clock,
                            text: "Mon-Fri: 9AM-6PM, Sat: 10AM-4PM"),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
          Container(
            color: AppColors.primaryBurgundy,
            child: const Padding(
              padding: EdgeInsets.all(16.0),
              child: Text(
                "© 2023 Audio Gear Haven. All rights reserved.",
                textAlign: TextAlign.center,
                style: TextStyle(color: AppColors.primaryCream),
              ),
            ),
          ),
        ],
      ),
    );
  }
}



===== lib/views/home/contact_info.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:flutter/material.dart';

// contact info class, used in the contact section
class ContactInfo extends StatelessWidget {
  final IconData icon;
  final String text;

  const ContactInfo({super.key, required this.icon, required this.text});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Icon(icon, color: AppColors.accentBrown),
          const SizedBox(width: 10),
          Text(text, style: const TextStyle(color: AppColors.secondaryGreen)),
        ],
      ),
    );
  }
}



===== lib/views/home/build_category_card.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:flutter/material.dart';

// Helper method for building category cards
Widget buildCategoryCard(IconData icon, String label) {
  return Card(
    color: AppColors.primaryCream,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(10),
      side: const BorderSide(color: AppColors.secondaryGold),
    ),
    child: Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, size: 32, color: AppColors.accentBrown),
          const SizedBox(height: 10),
          Text(
            label,
            style: const TextStyle(
                fontWeight: FontWeight.bold, color: AppColors.primaryBurgundy),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    ),
  );
}



===== lib/views/categories_view.dart =====
import 'package:e_commerce_project/services/cache/categories_cache.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';

class CategoriesView extends StatefulWidget {
  const CategoriesView({super.key});

  @override
  _CategoriesViewState createState() => _CategoriesViewState();
}

class _CategoriesViewState extends State<CategoriesView> {
  // every category's state (if not expanded, state = false, else true)
  final List<bool> _expandedStates =
      List.filled(CategoriesCache().getAllCategories().length, false);

  @override
  Widget build(BuildContext context) {
    final categories = CategoriesCache().getAllCategories();

    return BaseScaffold(
      title: 'Categories',
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: ListView.builder(
          itemCount: categories.length,
          itemBuilder: (context, index) {
            final category = categories[index];
            return Card(
              color: AppColors.primaryCream,
              shape: RoundedRectangleBorder(
                side: const BorderSide(color: AppColors.secondaryGold),
                borderRadius: BorderRadius.circular(10.0),
              ),
              child: ExpansionTile(
                title: Text(
                  category.name,
                  style: Theme.of(context)
                      .textTheme
                      .titleSmall
                      ?.copyWith(fontSize: 18.0),
                ),
                subtitle: Text(
                  '${category.items} items',
                  style: Theme.of(context).textTheme.bodySmall,
                ),
                trailing: Icon(
                  _expandedStates[index]
                      ? Icons.expand_less
                      : Icons.expand_more,
                  color: AppColors.secondaryGold,
                ),
                onExpansionChanged: (expanded) {
                  setState(() {
                    _expandedStates[index] = expanded;
                  });
                },
                children: category.subCategories.map(
                  (subCategory) {
                    return ListTile(
                      title: Text(
                        subCategory.name,
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                              fontSize: 16.0,
                            ),
                      ),
                      subtitle: Text(
                        '${subCategory.items} items',
                        style: Theme.of(context).textTheme.bodySmall,
                      ),
                    );
                  },
                ).toList(),
              ),
            );
          },
        ),
      ),
    );
  }
}



===== lib/views/help_support_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';

class HelpSupportView extends StatelessWidget {
  final List<Map<String, String>> faqs = [
    {
      "question": "How do I place an order?",
      "answer":
          "To place an order, browse our catalog, select the items you want, add them to your cart, and proceed to checkout. Follow the prompts to enter your shipping and payment information."
    },
    {
      "question": "What payment methods do you accept?",
      "answer":
          "We accept major credit cards (Visa, MasterCard, American Express), PayPal, and Apple Pay."
    },
    {
      "question": "How long does shipping take?",
      "answer":
          "Shipping times vary depending on your location. Standard shipping typically takes 3-5 business days, while express shipping can take 1-2 business days."
    },
    {
      "question": "Do you offer international shipping?",
      "answer":
          "Yes, we offer international shipping to most countries. Shipping costs and delivery times may vary depending on the destination."
    },
    {
      "question": "What is your return policy?",
      "answer":
          "We offer a 30-day return policy for most items. Products must be in their original condition with all packaging and accessories. Please contact us to initiate a return."
    }
  ];

  HelpSupportView({super.key});

  @override
  Widget build(BuildContext context) {
    return BaseScaffold(
      title: 'Help & Support',
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Card(
                color: AppColors.primaryCream,
                shape: RoundedRectangleBorder(
                  side: const BorderSide(color: AppColors.secondaryGold),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Frequently Asked Questions',
                        style: Theme.of(context)
                            .textTheme
                            .titleSmall
                            ?.copyWith(fontSize: 20.0),
                      ),
                      const SizedBox(height: 16),
                      ...faqs.map((faq) => ExpansionTile(
                            title: Text(
                              faq['question']!,
                              style: Theme.of(context)
                                  .textTheme
                                  .bodySmall
                                  ?.copyWith(
                                    fontSize: 18.0,
                                    color: AppColors.primaryBurgundy,
                                  ),
                            ),
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(16),
                                child: Text(faq['answer']!,
                                    style:
                                        Theme.of(context).textTheme.bodySmall),
                              ),
                            ],
                          )),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Card(
                color: AppColors.primaryCream,
                shape: RoundedRectangleBorder(
                  side: const BorderSide(color: AppColors.secondaryGold),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Contact Us',
                        style: Theme.of(context)
                            .textTheme
                            .titleSmall
                            ?.copyWith(fontSize: 20.0),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'If you have any questions or concerns that aren\'t addressed in our FAQ, please don\'t hesitate to reach out to us via email.',
                        style: Theme.of(context).textTheme.bodySmall,
                      ),
                      const SizedBox(height: 16),
                      Row(
                        children: [
                          const Icon(Icons.email,
                              color: AppColors.secondaryGreen),
                          const SizedBox(width: 8),
                          Text('support@audiogear.com',
                              style: Theme.of(context).textTheme.displaySmall),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}



===== lib/views/store/product_detail_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/services/store/product.dart';

class ProductDetailView extends StatelessWidget {
  final Product product;

  const ProductDetailView({super.key, required this.product});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Charly\'s Hideout',
          style: Theme.of(context).textTheme.titleLarge,
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          color: AppColors.primaryCream,
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        backgroundColor: AppColors.primaryBurgundy,
        actions: const [],
      ),
      backgroundColor: AppColors.primaryCream,
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            AspectRatio(
              aspectRatio: 4 / 3,
              child: Image.network(
                product.images[0],
                fit: BoxFit.contain,
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    color: AppColors.secondaryGold,
                    child: const Center(
                      child: Icon(Icons.image_not_supported,
                          size: 50, color: AppColors.primaryBurgundy),
                    ),
                  );
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    product.title,
                    style: Theme.of(context).textTheme.bodyLarge,
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        '\$${product.unitPrice.toStringAsFixed(2)}',
                        style: Theme.of(context).textTheme.labelMedium,
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  Text(
                    'Description',
                    style: Theme.of(context).textTheme.headlineSmall,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    product.description,
                    style: Theme.of(context).textTheme.bodySmall,
                  ),
                  const SizedBox(height: 24),
                  Text(
                    'Specifications',
                    style: Theme.of(context).textTheme.headlineSmall,
                  ),
                  const SizedBox(height: 8),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: product.features
                        .map<Widget>((spec) => Padding(
                              padding: const EdgeInsets.only(bottom: 4),
                              child: Text(
                                '• $spec',
                                style: Theme.of(context).textTheme.bodySmall,
                              ),
                            ))
                        .toList(),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: Container(
        padding: const EdgeInsets.all(16),
        decoration: const BoxDecoration(
            color: AppColors.primaryCream,
            border: Border(
                top: BorderSide(
              color: AppColors.secondaryGold,
              width: 1.0,
            ))),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.secondaryGold,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          onPressed: () {
            // Implement add to cart functionality
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Thank You!')),
            );
          },
          child: Text('Send a Whatsapp to Charly',
              style: Theme.of(context).textTheme.headlineSmall),
        ),
      ),
    );
  }
}



===== lib/views/store/main_store_view.dart =====
import 'package:e_commerce_project/services/cache/product_cache.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:e_commerce_project/widgets/item_grid.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/widgets/custom_search_delegate.dart';

class StoreView extends StatelessWidget {
  const StoreView({super.key});

  @override
  Widget build(BuildContext context) {
    return BaseScaffold(
      title: 'Charly\'s Hideout',
      actions: [
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: IconButton(
            icon: const Icon(Icons.search),
            onPressed: () {
              showSearch(
                context: context,
                delegate:
                    CustomSearchDelegate(ProductCache().getAllProducts()!),
              );
            },
          ),
        ),
      ],
      body: ItemGrid(
        items: ProductCache().getAllProducts()!,
      ),
    );
  }
}



===== lib/helpers/loading_screen_controller.dart =====
import 'package:flutter/foundation.dart' show immutable;

typedef CloseLoadingScreen = bool Function();
typedef UpdateLoadingScreen = bool Function(String text);

@immutable
class LoadingScreenController {
  final CloseLoadingScreen close;
  final UpdateLoadingScreen update;

  const LoadingScreenController({required this.close, required this.update});
}



===== lib/helpers/loading_screen.dart =====
import 'package:flutter/material.dart';
import 'dart:math';

import 'package:e_commerce_project/constants/app_colors.dart';

class LoadingScreen extends StatefulWidget {
  const LoadingScreen({super.key});

  @override
  _LoadingScreenState createState() => _LoadingScreenState();
}

class _LoadingScreenState extends State<LoadingScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.primaryCream,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            AnimatedBuilder(
              animation: _animation,
              builder: (_, child) {
                return Transform.rotate(
                  angle: _animation.value * 2 * pi,
                  child: child,
                );
              },
            ),
            const SizedBox(height: 24),
            const Text(
              'Charly\'s Hideout',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.primaryBurgundy,
              ),
            ),
            const SizedBox(height: 24),
            const SizedBox(
              width: 200,
              child: LinearProgressIndicator(
                valueColor:
                    AlwaysStoppedAnimation<Color>(AppColors.primaryBurgundy),
                backgroundColor: AppColors.secondaryGold,
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Loading your gear...',
              style: TextStyle(
                color: AppColors.secondaryGold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}



===== lib/services/cache/categories_cache.dart =====
import 'package:e_commerce_project/services/store/category.dart';

class CategoriesCache {
  static final CategoriesCache _instance = CategoriesCache._internal();
  factory CategoriesCache() => _instance;
  CategoriesCache._internal();

  final Map<String, Category> _cache = {};

  void initializeCache(List<Category> categories) {
    for (var category in categories) {
      _cache[category.id] = category;
    }
  }

  Category? getCategory(String id) {
    return _cache[id];
  }

  void clearCache() {
    _cache.clear();
  }

  bool containsCategory(String id) {
    return _cache.containsKey(id);
  }

  List<Category> getAllCategories() {
    return _cache.values.toList();
  }
}



===== lib/services/cache/product_cache.dart =====
import 'package:e_commerce_project/services/store/product.dart';

class ProductCache {
  static final ProductCache _instance = ProductCache._internal();
  factory ProductCache() => _instance;
  ProductCache._internal();

  // categoryId, list of all the products in the category
  final Map<String, List<Product>> _cache = {};

  void initializeCache(List<Product> products) {
    for (var product in products) {
      if (_cache[product.category] == null) {
        _cache[product.category] = [];
      }
      _cache[product.category]!.add(product);
    }
  }

  List<Product>? getAllProducts() {
    return _cache.values.expand((element) => element).toList();
  }

  List<Product>? getProducts(String categoryId) {
    return _cache[categoryId];
  }
}



===== lib/services/bloc/navigation_states.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationState extends Equatable {
  const NavigationState();

  @override
  List<Object> get props => [];
}

class IsLoadingState extends NavigationState {
  const IsLoadingState();
}

class HomeState extends NavigationState {
  const HomeState();
}

class StoreState extends NavigationState {
  final String categoryId;
  const StoreState({required this.categoryId});

  @override
  List<Object> get props => [categoryId];
}

class CategoriesState extends NavigationState {
  const CategoriesState();
}

class HelpSupportState extends NavigationState {
  const HelpSupportState();
}



===== lib/services/bloc/navigation_events.dart =====
import 'package:equatable/equatable.dart';

abstract class NavigationEvent extends Equatable {
  const NavigationEvent();

  @override
  List<Object> get props => [];
}

class IsLoading extends NavigationEvent {}

class NavigateToHome extends NavigationEvent {}

class NavigateToStore extends NavigationEvent {
  final String categoryId;

  const NavigateToStore({required this.categoryId});

  @override
  List<Object> get props => [categoryId];
}

class NavigateToCategories extends NavigationEvent {}

class NavigateToHelpSupport extends NavigationEvent {}



===== lib/services/bloc/navigation_bloc.dart =====
import 'package:flutter_bloc/flutter_bloc.dart';
import 'navigation_events.dart';
import 'navigation_states.dart';

class NavigationBloc extends Bloc<NavigationEvent, NavigationState> {
  NavigationBloc() : super(const HomeState()) {
    on<NavigateToHome>((event, emit) => emit(const HomeState()));

    on<NavigateToStore>(
      (event, emit) => emit(StoreState(categoryId: event.categoryId)),
    );

    on<NavigateToCategories>((event, emit) => emit(const CategoriesState()));

    on<NavigateToHelpSupport>((event, emit) => emit(const HelpSupportState()));

    on<IsLoading>((event, emit) => emit(const IsLoadingState()));
  }
}



===== lib/services/store/product.dart =====
class Product {
  String id;
  String title;
  String description;
  String category;
  String subCategory;
  double unitPrice;
  List<String> images;
  String sku;
  String slug;
  int inventory;
  DateTime lastUpdate;
  String productCollection;
  bool promotion;
  List<String> features;

  Product({
    required this.id,
    required this.title,
    required this.description,
    required this.category,
    required this.subCategory,
    required this.unitPrice,
    required this.images,
    required this.sku,
    required this.slug,
    required this.inventory,
    required this.lastUpdate,
    required this.productCollection,
    required this.promotion,
    required this.features,
  });
}



===== lib/services/store/category.dart =====
class Category {
  final String id;
  final String name;
  final int items;
  final List<Category> subCategories;

  Category({
    required this.id,
    required this.name,
    required this.items,
    this.subCategories = const [],
  });
}



===== lib/utilities/no_paste_text_formatter.dart =====
import 'package:flutter/services.dart';

class NoPasteTextFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    if (newValue.text.length > oldValue.text.length + 1) {
      return oldValue;
    }
    return newValue;
  }
}



===== lib/main.dart =====
import 'package:e_commerce_project/constants/text_themes/app_text_themes.dart';
import 'package:e_commerce_project/mock/mock_categories.dart';
import 'package:e_commerce_project/mock/mock_products.dart';
import 'package:e_commerce_project/services/cache/categories_cache.dart';
import 'package:e_commerce_project/services/cache/product_cache.dart';
import 'package:e_commerce_project/views/categories_view.dart';
import 'package:e_commerce_project/views/help_support_view.dart';
import 'package:e_commerce_project/views/home/home_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/helpers/loading_screen.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/services/bloc/navigation_states.dart';
import 'package:e_commerce_project/views/store/main_store_view.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'services/bloc/navigation_bloc.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize caches
  CategoriesCache().initializeCache(mockCategories);
  ProductCache().initializeCache(mockProducts);
  runApp(
    MaterialApp(
      title: 'Charly\'s Hideout',
      home: BlocProvider<NavigationBloc>(
        create: (context) => NavigationBloc(),
        child: const HomePage(),
      ),
      debugShowCheckedModeBanner: false,
      theme: ThemeData(textTheme: AppTextThemes.lightTextTheme),
    ),
  );
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    context.read<NavigationBloc>().add(NavigateToHome());
    return BlocBuilder<NavigationBloc, NavigationState>(
      builder: (context, state) {
        if (state is HomeState) {
          return const HomePageView();
        } else if (state is StoreState) {
          return const StoreView();
        } else if (state is CategoriesState) {
          return const CategoriesView();
        } else if (state is HelpSupportState) {
          return HelpSupportView();
        } else if (state is IsLoadingState) {
          return const LoadingScreen();
        } else {
          return const Scaffold(
            body: CircularProgressIndicator(),
          );
        }
      },
    );
  }
}



===== lib/constants/app_colors.dart =====
import 'package:flutter/material.dart';

class AppColors {
  // primary colors
  static const Color primaryBurgundy = Color.fromARGB(255, 92, 26, 27);
  static const Color primaryCream = Color.fromARGB(255, 245, 245, 220);

  // secondary colors
  static const Color secondaryGold = Color.fromARGB(255, 201, 163, 44);
  static const Color secondaryGreen = Color.fromARGB(255, 47, 79, 79);

  // accent colors
  static const Color accentBrown = Color.fromARGB(255, 139, 69, 19);
  static const Color accentGray = Color.fromARGB(255, 112, 128, 144);
}



===== lib/constants/drawer_items.dart =====
class DrawerItems {
  static const List<String> items = [
    'Home',
    'Store',
    'Categories',
    'Help & Support',
  ];
}



===== lib/constants/text_themes/app_text_themes.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class AppTextThemes {
  static final TextTheme lightTextTheme = TextTheme(
      // Drawer & App Title
      titleLarge: GoogleFonts.playfairDisplay(
        color: AppColors.primaryCream,
        fontSize: 28.0,
        fontWeight: FontWeight.w400,
      ),
      // Drawer items
      titleMedium: GoogleFonts.playfairDisplay(
        fontSize: 18.0,
        fontWeight: FontWeight.w600,
        color: AppColors.primaryBurgundy,
      ),
      // Product card title
      // Copied with size 20 for H&S dropdown titles
      titleSmall: GoogleFonts.playfairDisplay(
        color: AppColors.primaryBurgundy,
        fontWeight: FontWeight.bold,
        fontSize: 16.0,
      ),
      // Prices
      // Copied with fontSize: 20.0 for the product card
      labelMedium: GoogleFonts.playfairDisplay(
        color: AppColors.secondaryGreen,
        fontWeight: FontWeight.w300,
        fontSize: 28.0,
      ),
      // Buttons
      labelSmall: GoogleFonts.playfairDisplay(
        color: AppColors.primaryCream,
        fontSize: 15.0,
      ),
      // Product detail title
      bodyLarge: GoogleFonts.playfairDisplay(
        color: AppColors.primaryBurgundy,
        fontWeight: FontWeight.bold,
        fontSize: 24.0,
      ),
      // Product detail headings (description, characteristics, etc.)
      headlineSmall: GoogleFonts.playfairDisplay(
        fontSize: 20,
        fontWeight: FontWeight.bold,
        color: AppColors.primaryBurgundy,
      ),
      // Body text
      bodySmall: GoogleFonts.inter(
        fontSize: 16,
        color: AppColors.accentBrown,
      ),
      // Contact e-mail
      displaySmall: GoogleFonts.inter(
        color: AppColors.secondaryGreen,
        fontWeight: FontWeight.w600,
        fontSize: 14.0,
      ));
}



===== lib/widgets/drawer_list_tile.dart =====
import 'package:flutter/material.dart';

class DrawerListTile extends StatelessWidget {
  final String title;
  final VoidCallback onTap;

  const DrawerListTile({
    super.key,
    required this.title,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Padding(
        padding: const EdgeInsets.only(
          left: 28.0,
          top: 8.0,
          bottom: 8.0,
        ),
        child: Text(
          title,
          style: Theme.of(context).textTheme.titleMedium,
        ),
      ),
      onTap: onTap,
    );
  }
}



===== lib/widgets/item_grid.dart =====
import 'package:e_commerce_project/services/store/product.dart';
import 'package:e_commerce_project/widgets/product_card.dart';
import 'package:flutter/material.dart';

// Displays the item grid, getting the items and the categoryId
// as an optional parameter. That is so that the widget can be
// used to show not only the products of a certain category but
// all the products.
class ItemGrid extends StatelessWidget {
  final String? categoryId;
  final List<Product> items;

  const ItemGrid({
    super.key,
    required this.items,
    this.categoryId,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: LayoutBuilder(
        builder: (context, constraints) {
          double screenWidth = constraints.maxWidth;
          double screenHeight = constraints.maxHeight;

          int crossAxisCount;
          double childAspectRatio;

          if (screenWidth > 650) {
            crossAxisCount = 4;
          } else if (screenWidth > 525) {
            crossAxisCount = 3;
          } else {
            crossAxisCount = 2;
          }

          childAspectRatio = (screenHeight / screenWidth * 0.3).clamp(0.5, 0.8);

          return GridView.builder(
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: crossAxisCount,
              crossAxisSpacing: 8.0,
              mainAxisSpacing: 8.0,
              childAspectRatio: childAspectRatio,
            ),
            itemCount: items.length,
            itemBuilder: (context, index) {
              return ProductCard(
                product: items.elementAt(index),
              );
            },
          );
        },
      ),
    );
  }
}



===== lib/widgets/product_card.dart =====
import 'package:e_commerce_project/views/store/product_detail_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';

class ProductCard extends StatelessWidget {
  final Product product;

  const ProductCard({
    required this.product,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        double maxWidth =
            constraints.maxWidth > 400 ? 400 : constraints.maxWidth;
        double maxHeight =
            constraints.maxHeight > 600 ? 600 : constraints.maxHeight;
        return Center(
          child: ConstrainedBox(
            constraints: BoxConstraints(
              maxWidth: maxWidth,
            ),
            child: Card(
              color: AppColors.primaryCream,
              shape: const RoundedRectangleBorder(
                side: BorderSide(
                  color: AppColors.secondaryGold,
                ),
                borderRadius: BorderRadius.all(
                  Radius.circular(8.0),
                ),
              ),
              elevation: 4.0,
              child: SizedBox(
                height: maxHeight,
                child: Column(
                  children: [
                    Expanded(
                      child: Padding(
                        padding: const EdgeInsets.only(
                          top: 8.0,
                          left: 8.0,
                          right: 8.0,
                        ),
                        child: ClipRRect(
                          borderRadius: const BorderRadius.only(
                            topLeft: Radius.circular(8.0),
                            topRight: Radius.circular(8.0),
                          ),
                          child: Image.asset(
                            product.images[0],
                            fit: BoxFit.cover,
                            width: double.infinity,
                          ),
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.only(
                        top: 8.0,
                        bottom: 8.0,
                        left: 12.0,
                      ),
                      child: Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          product.title,
                          style: Theme.of(context).textTheme.titleSmall,
                          maxLines: 2,
                        ),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.all(8.0),
                      decoration: const BoxDecoration(
                        color: AppColors.secondaryGreen,
                        borderRadius: BorderRadius.only(
                          bottomLeft: Radius.circular(8.0),
                          bottomRight: Radius.circular(8.0),
                        ),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            '\$${product.unitPrice}',
                            style: Theme.of(context)
                                .textTheme
                                .labelMedium
                                ?.copyWith(
                                  color: AppColors.primaryCream,
                                  fontSize: 18.0,
                                ),
                          ),
                          ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppColors.secondaryGold,
                              textStyle:
                                  Theme.of(context).textTheme.labelMedium,
                              shape: const LinearBorder(),
                            ),
                            onPressed: () {
                              Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                      builder: (context) =>
                                          ProductDetailView(product: product)));
                            },
                            child: Text(
                              'View',
                              style: Theme.of(context).textTheme.labelSmall,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }
}



===== lib/widgets/base_scaffold.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/constants/drawer_items.dart';
import 'package:e_commerce_project/widgets/custom_drawer.dart';
import 'package:flutter/material.dart';

class BaseScaffold extends StatelessWidget {
  final Widget body;
  final String title;
  final List<Widget>? actions;
  final Widget? bottomNavigationBar;
  final Widget? bottomSheet;

  const BaseScaffold({
    super.key,
    required this.body,
    required this.title,
    this.actions,
    this.bottomNavigationBar,
    this.bottomSheet,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: AppColors.primaryBurgundy,
        title: Text(title, style: Theme.of(context).textTheme.titleLarge),
        iconTheme: const IconThemeData(
          color: AppColors.primaryCream,
        ),
        actions: actions,
      ),
      drawer: const CustomDrawer(drawerItems: DrawerItems.items),
      backgroundColor: AppColors.primaryCream,
      body: body,
      bottomNavigationBar: bottomNavigationBar,
      bottomSheet: bottomSheet,
    );
  }
}



===== lib/widgets/custom_search_delegate.dart =====
import 'package:e_commerce_project/views/store/product_detail_view.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/store/product.dart';

class CustomSearchDelegate extends SearchDelegate {
  final List<Product> data;

  CustomSearchDelegate(this.data);

  @override
  ThemeData appBarTheme(BuildContext context) {
    return ThemeData(
      appBarTheme: const AppBarTheme(
        backgroundColor: AppColors.primaryBurgundy,
        elevation: 10.0,
      ),
      iconTheme: const IconThemeData(color: AppColors.primaryCream),
      inputDecorationTheme: const InputDecorationTheme(
        hintStyle: TextStyle(color: Color.fromARGB(255, 131, 131, 131)),
        border: InputBorder.none,
      ),
    );
  }

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: IconButton(
          icon: const Icon(Icons.clear),
          color: AppColors.primaryCream,
          onPressed: () {
            if (query.isEmpty) {
              close(context, null);
            } else {
              query = '';
            }
          },
        ),
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const IconTheme(
        data: IconThemeData(size: 22.0),
        child: Icon(
          Icons.arrow_back,
          color: AppColors.primaryCream,
        ),
      ),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  TextStyle? get searchFieldStyle => const TextStyle(
        color: AppColors.primaryCream,
        fontSize: 18,
        fontWeight: FontWeight.w100,
      );

  @override
  Widget buildResults(BuildContext context) {
    final results = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();
    return ListView.builder(
      itemCount: results.length,
      itemBuilder: (context, index) {
        final product = results[index];
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Card(
            color:
                AppColors.primaryCream, // Background color similar to the image
            shape: RoundedRectangleBorder(
              side: const BorderSide(
                  color: AppColors.secondaryGold), // Border color
              borderRadius: BorderRadius.circular(8.0), // Rounded corners
            ),
            child: ListTile(
              leading: Image.network(
                product.images[0],
                width: 50,
                height: 50,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.error),
              ),
              title: Text(
                product.title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: AppColors.primaryBurgundy, // Text color
                ),
              ),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(product.category),
                  Text(
                    '\$${product.unitPrice}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      color: AppColors.secondaryGreen, // Price color
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              onTap: () {
                query = results[index].title;
                Navigator.push(
                    context,
                    MaterialPageRoute(
                        builder: (context) =>
                            ProductDetailView(product: product)));
              },
            ),
          ),
        );
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions = data
        .where((item) => item.title.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return Container(
      color: AppColors.primaryCream,
      child: ListView.builder(
        itemCount: suggestions.length,
        itemBuilder: (context, index) {
          final product = suggestions[index];
          return Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 2.0),
            child: Card(
              color: AppColors.primaryCream,
              shape: RoundedRectangleBorder(
                side: const BorderSide(color: AppColors.secondaryGold),
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: ListTile(
                leading: Image.network(
                  product.images[0],
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.error),
                ),
                title: Text(
                  product.title,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: AppColors.primaryBurgundy,
                  ),
                ),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      product.category,
                    ),
                    Text(
                      '\$${product.unitPrice}',
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        color: AppColors.secondaryGreen,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                onTap: () {
                  query = suggestions[index].title;
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) =>
                              ProductDetailView(product: product)));
                },
              ),
            ),
          );
        },
      ),
    );
  }
}



===== lib/widgets/custom_drawer.dart =====
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/widgets/drawer_list_tile.dart';

class CustomDrawer extends StatelessWidget {
  final List<String> drawerItems;

  const CustomDrawer({
    super.key,
    required this.drawerItems,
  });

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;

    return Drawer(
      backgroundColor: AppColors.primaryCream,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topRight: Radius.zero,
          bottomRight: Radius.zero,
        ),
      ),
      width: screenWidth * 0.7,
      child: ListView.separated(
        padding: EdgeInsets.zero,
        itemCount: drawerItems.length + 2, // +2 for the header & box
        itemBuilder: (context, index) {
          if (index == 0) {
            return Container(
              color: AppColors.primaryBurgundy,
              padding: const EdgeInsets.only(
                left: 18.0,
                top: 8.0,
                bottom: 10.0,
              ),
              child: Text('Charly\'s Hideout',
                  style: Theme.of(context).textTheme.titleLarge),
            );
          } else if (index == 1) {
            return const SizedBox(height: 22.0);
          } else {
            final title = drawerItems[index - 2];
            return DrawerListTile(
              title: title,
              onTap: () {
                if (title == 'Home') {
                  // Navigate to home screen
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHome());
                } else if (title == 'Store') {
                  // Navigate to store
                  BlocProvider.of<NavigationBloc>(context)
                      .add(const NavigateToStore(categoryId: ''));
                } else if (title == 'Categories') {
                  // Navigate to categories
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToCategories());
                } else if (title == 'Help & Support') {
                  // Navigate to help & support
                  BlocProvider.of<NavigationBloc>(context)
                      .add(NavigateToHelpSupport());
                }
              },
            );
          }
        },
        separatorBuilder: (BuildContext context, int index) {
          return [0, 1].contains(index)
              ? const SizedBox.shrink()
              : Divider(
                  height: 1.0,
                  indent: screenWidth * 0.08,
                  endIndent: screenWidth * 0.08,
                  color: AppColors.secondaryGold,
                );
        },
      ),
    );
  }
}



===== lib/mock/mock_categories.dart =====
import 'package:e_commerce_project/services/store/category.dart';

final List<Category> mockCategories = [
  Category(
    id: "1",
    name: "Guitars",
    items: 120,
    subCategories: [
      Category(id: "2", name: "Electric Guitars", items: 60),
      Category(id: "3", name: "Acoustic Guitars", items: 40),
      Category(id: "4", name: "Bass Guitars", items: 20),
    ],
  ),
  Category(
    id: "5",
    name: "Audio",
    items: 45,
    subCategories: [
      Category(id: "6", name: "Headphones", items: 25),
      Category(id: "7", name: "Speakers", items: 20),
    ],
  ),
  Category(
    id: "8",
    name: "Amplifiers",
    items: 80,
    subCategories: [
      Category(id: "9", name: "Guitar Amps", items: 50),
      Category(id: "10", name: "Bass Amps", items: 30),
    ],
  ),
  Category(
    id: "11",
    name: "Effects Pedals",
    items: 200,
    subCategories: [
      Category(id: "12", name: "Distortion", items: 70),
      Category(id: "13", name: "Reverb", items: 50),
      Category(id: "14", name: "Delay", items: 80),
    ],
  ),
  Category(
    id: "15",
    name: "Accessories",
    items: 150,
    subCategories: [
      Category(id: "16", name: "Strings", items: 50),
      Category(id: "17", name: "Cables", items: 50),
      Category(id: "18", name: "Stands", items: 50),
    ],
  ),
];



===== lib/mock/mock_products.dart =====
import 'package:e_commerce_project/services/store/product.dart';

final List<Product> mockProducts = [
  Product(
    id: '1',
    title: 'Fender Stratocaster',
    description: 'Classic electric guitar with a timeless sound.',
    category: '1',
    subCategory: '2',
    unitPrice: 1199.99,
    images: [
      'assets/images/fender-stratocaster/fender-stratocaster-1.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-2.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-3.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-4.jpg',
      'assets/images/fender-stratocaster/fender-stratocaster-5.jpg',
    ],
    sku: 'FEND-STRAT',
    slug: 'fender-stratocaster',
    inventory: 15,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
  ),
  Product(
    id: '2',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Gibson Les Paul',
    description: 'Iconic electric guitar known for its rich tone.',
    unitPrice: 2499.99,
    category: 'Guitar',
    subCategory: '2',
    images: [
      'assets/images/gibson-les-paul/gibson-les-paul-1.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-2.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-3.jpg',
      'assets/images/gibson-les-paul/gibson-les-paul-4.jpg',
    ],
    sku: 'GIBS-LESPAUL',
    slug: 'gibson-les-paul',
    inventory: 10,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    id: '3',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Fender Telecaster',
    description: 'Versatile electric guitar with a distinctive twang.',
    unitPrice: 999.99,
    category: '1',
    subCategory: '2',
    images: [
      'assets/images/fender-telecaster/fender-telecaster-1.jpeg',
    ],
    sku: 'FEND-TELE',
    slug: 'fender-telecaster',
    inventory: 8,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: true,
  ),
  Product(
    id: '4',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Gibson SG',
    description: 'Classic electric guitar with a powerful sound.',
    unitPrice: 1999.99,
    category: '1',
    subCategory: '2',
    images: [
      'assets/images/gibson-sg/gibson-sg-1.jpeg',
    ],
    sku: 'GIBS-SG',
    slug: 'gibson-sg',
    inventory: 12,
    lastUpdate: DateTime.now(),
    productCollection: 'Guitars',
    promotion: false,
  ),
  Product(
    id: '5',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Shure SM58 Microphone',
    description: 'Legendary vocal microphone with excellent sound quality.',
    unitPrice: 99.99,
    category: '5',
    subCategory: '7',
    images: [
      'assets/images/mic-shure/mic-shure-1.jpeg',
    ],
    sku: 'SHURE-SM58',
    slug: 'shure-sm58',
    inventory: 20,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: true,
  ),
  Product(
    id: '6',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Universal Audio Apollo Twin X',
    description: 'High-quality audio interface for professional recording.',
    unitPrice: 1299.99,
    category: '5',
    subCategory: '6',
    images: [
      'assets/images/apollo-interface/apollo-interface-1.jpeg',
    ],
    sku: 'UA-APOLLO',
    slug: 'universal-audio-apollo-twin-x',
    inventory: 5,
    lastUpdate: DateTime.now(),
    productCollection: 'Audio',
    promotion: false,
  ),
  Product(
    id: '7',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Marshall JVM410H Amplifier',
    description: 'Versatile guitar amplifier with a wide range of tones.',
    unitPrice: 1999.99,
    category: '8',
    subCategory: '9',
    images: [
      'assets/images/marshall-jvm410h/marshall-jvm410h-1.jpeg',
    ],
    sku: 'MARSH-JVM410H',
    slug: 'marshall-jvm410h',
    inventory: 7,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: true,
  ),
  Product(
    id: '8',
    features: [
      'Classic design',
      'Versatile sound options',
      'Comfortable to play',
    ],
    title: 'Orange Rockerverb 50 MKIII',
    description: 'Powerful and versatile guitar amplifier head.',
    unitPrice: 2499.99,
    category: '8',
    subCategory: '9',
    images: [
      'assets/images/orange-rockerverb50-mkii/orange-rockerverb50-mkii-1.jpeg',
    ],
    sku: 'ORANGE-RV50',
    slug: 'orange-rockerverb50-mkii',
    inventory: 3,
    lastUpdate: DateTime.now(),
    productCollection: 'Amplifiers',
    promotion: false,
  ),
];



===== lib/mock/mock_faqs.dart =====
// TODO complete


===== lib/views/home/home_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_events.dart';
import 'package:e_commerce_project/views/home/build_category_card.dart';
import 'package:e_commerce_project/views/home/contact_info.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

class HomePageView extends StatelessWidget {
  const HomePageView({super.key});

  @override
  Widget build(BuildContext context) {
    //TODO continue styling
    return BaseScaffold(
      title: 'Charly\'s Hideout',
      body: ListView(
        children: [
          // Welcome section
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                Text(
                  "Your Audio Gear Specialist",
                  textAlign: TextAlign.center,
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        color: AppColors.primaryBurgundy,
                        fontSize: 38.0,
                        fontWeight: FontWeight.bold,
                      ),
                ),
                const SizedBox(height: 10),
                Text(
                  "Expert repairs and premium sales since 2016",
                  textAlign: TextAlign.center,
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        fontSize: 18.0,
                      ),
                ),
                const SizedBox(height: 20),
                Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: TextField(
                            decoration: InputDecoration(
                              contentPadding:
                                  const EdgeInsets.symmetric(horizontal: 16.0),
                              hintText: "Search for gear...",
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(8.0),
                                borderSide: const BorderSide(
                                  color: AppColors.secondaryGold,
                                ),
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 10),
                        ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: AppColors.secondaryGold,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8.0),
                            ),
                          ),
                          onPressed: () {
                            // Handle search action
                          },
                          child: const Icon(FontAwesomeIcons.magnifyingGlass,
                              color: AppColors.primaryBurgundy),
                        ),
                      ],
                    ),
                    const SizedBox(width: 10),
                    OutlinedButton(
                      style: OutlinedButton.styleFrom(
                        side: const BorderSide(color: AppColors.secondaryGold),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8.0),
                        ),
                        backgroundColor: Colors.transparent,
                      ),
                      onPressed: () {
                        BlocProvider.of<NavigationBloc>(context)
                            .add(const NavigateToStore(categoryId: ''));
                      },
                      child: const Text(
                        "Browse Catalog",
                        style: TextStyle(color: AppColors.primaryBurgundy),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          const SizedBox(height: 20),

          // Tabs Section
          DefaultTabController(
            length: 2,
            child: Column(
              children: [
                const TabBar(
                  indicatorColor: AppColors.primaryBurgundy,
                  tabs: [
                    Tab(
                        child: Text('Repairs',
                            style:
                                TextStyle(color: AppColors.primaryBurgundy))),
                    Tab(
                        child: Text('Sales',
                            style:
                                TextStyle(color: AppColors.primaryBurgundy))),
                  ],
                ),
                SizedBox(
                  height: 300,
                  child: TabBarView(
                    children: [
                      // Repairs Tab
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Card(
                          color: AppColors.primaryCream,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                            side: const BorderSide(
                                color: AppColors.secondaryGold),
                          ),
                          child: const Padding(
                            padding: EdgeInsets.all(16.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Expert Repairs",
                                  style: TextStyle(
                                      fontSize: 24,
                                      fontWeight: FontWeight.bold,
                                      color: AppColors.primaryBurgundy),
                                ),
                                SizedBox(height: 10),
                                Text(
                                  "We specialize in repairing all types of audio equipment, from vintage amplifiers to modern digital interfaces. Our home-based workshop is equipped to handle a wide range of issues.",
                                  style: TextStyle(
                                      color: AppColors.secondaryGreen),
                                ),
                                SizedBox(height: 10),
                                Text("• Amplifier and speaker repairs",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Guitar and bass setups",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Microphone and preamp servicing",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Vintage equipment restoration",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                              ],
                            ),
                          ),
                        ),
                      ),
                      // Sales Tab
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Card(
                          color: AppColors.primaryCream,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                            side: const BorderSide(
                                color: AppColors.secondaryGold),
                          ),
                          child: const Padding(
                            padding: EdgeInsets.all(16.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Quality Sales",
                                  style: TextStyle(
                                      fontSize: 24,
                                      fontWeight: FontWeight.bold,
                                      color: AppColors.primaryBurgundy),
                                ),
                                SizedBox(height: 10),
                                Text(
                                  "We offer a curated selection of high-quality audio equipment, both new and vintage. Our inventory is hand-picked to ensure the best value and performance for our customers.",
                                  style: TextStyle(
                                      color: AppColors.secondaryGreen),
                                ),
                                SizedBox(height: 10),
                                Text("• Professional-grade microphones",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Boutique and vintage amplifiers",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• High-end studio monitors",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                                Text("• Rare and collectible instruments",
                                    style: TextStyle(
                                        color: AppColors.secondaryGreen)),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),

          // Featured Categories Section
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "Featured Categories",
                  style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: AppColors.primaryBurgundy),
                ),
                const SizedBox(height: 10),
                GridView.count(
                  crossAxisCount: 3,
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  children: [
                    buildCategoryCard(
                        FontAwesomeIcons.guitar, 'Guitars & Basses'),
                    buildCategoryCard(FontAwesomeIcons.bolt, 'Effect Pedals'),
                    buildCategoryCard(
                        FontAwesomeIcons.headphones, 'Audio Gear'),
                  ],
                ),
              ],
            ),
          ),

          // About Section
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Card(
              color: AppColors.primaryCream,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
                side: const BorderSide(color: AppColors.secondaryGold),
              ),
              child: const Padding(
                padding: EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      "About Audio Gear Haven",
                      style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: AppColors.primaryBurgundy),
                    ),
                    SizedBox(height: 10),
                    Text(
                      "Founded in 2016 by an experienced audio engineer, Audio Gear Haven has been serving the La Plata music community from our home-based workshop.",
                      style: TextStyle(color: AppColors.secondaryGreen),
                    ),
                    SizedBox(height: 10),
                    Text(
                      '"Incredible service and expertise. My vintage amp has never sounded better!" - Maria L.',
                      style: TextStyle(
                          fontStyle: FontStyle.italic,
                          color: AppColors.accentBrown),
                    ),
                  ],
                ),
              ),
            ),
          ),

          // Contact Section
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "Get in Touch",
                  style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: AppColors.primaryBurgundy),
                ),
                const SizedBox(height: 10),
                Card(
                  color: AppColors.primaryCream,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                    side: const BorderSide(color: Color(0xFFC9A32C)),
                  ),
                  child: const Padding(
                    padding: EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        ContactInfo(
                            icon: FontAwesomeIcons.phone,
                            text: "+54 221 542 4184"),
                        ContactInfo(
                            icon: FontAwesomeIcons.locationDot,
                            text: "La Plata, Buenos Aires"),
                        ContactInfo(
                            icon: FontAwesomeIcons.clock,
                            text: "Mon-Fri: 9AM-6PM, Sat: 10AM-4PM"),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
          Container(
            color: AppColors.primaryBurgundy,
            child: const Padding(
              padding: EdgeInsets.all(16.0),
              child: Text(
                "© 2023 Charly's Hideout. All rights reserved.",
                textAlign: TextAlign.center,
                style: TextStyle(color: AppColors.primaryCream),
              ),
            ),
          ),
        ],
      ),
    );
  }
}



===== lib/views/home/contact_info.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:flutter/material.dart';

// contact info class, used in the contact section
class ContactInfo extends StatelessWidget {
  final IconData icon;
  final String text;

  const ContactInfo({super.key, required this.icon, required this.text});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Icon(icon, color: AppColors.accentBrown),
          const SizedBox(width: 10),
          Text(text, style: const TextStyle(color: AppColors.secondaryGreen)),
        ],
      ),
    );
  }
}



===== lib/views/home/build_category_card.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:flutter/material.dart';

// Helper method for building category cards
Widget buildCategoryCard(IconData icon, String label) {
  return Card(
    color: AppColors.primaryCream,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(10),
      side: const BorderSide(color: AppColors.secondaryGold),
    ),
    child: Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, size: 32, color: AppColors.accentBrown),
          const SizedBox(height: 10),
          Text(
            label,
            style: const TextStyle(
                fontWeight: FontWeight.bold, color: AppColors.primaryBurgundy),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    ),
  );
}



===== lib/views/categories_view.dart =====
import 'package:e_commerce_project/services/cache/categories_cache.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/constants/app_colors.dart';

class CategoriesView extends StatefulWidget {
  const CategoriesView({super.key});

  @override
  _CategoriesViewState createState() => _CategoriesViewState();
}

class _CategoriesViewState extends State<CategoriesView> {
  // every category's state (if not expanded, state = false, else true)
  final List<bool> _expandedStates =
      List.filled(CategoriesCache().getAllCategories().length, false);

  @override
  Widget build(BuildContext context) {
    final categories = CategoriesCache().getAllCategories();

    return BaseScaffold(
      title: 'Categories',
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: ListView.builder(
          itemCount: categories.length,
          itemBuilder: (context, index) {
            final category = categories[index];
            return Card(
              color: AppColors.primaryCream,
              shape: RoundedRectangleBorder(
                side: const BorderSide(color: AppColors.secondaryGold),
                borderRadius: BorderRadius.circular(10.0),
              ),
              child: ExpansionTile(
                title: Text(
                  category.name,
                  style: Theme.of(context)
                      .textTheme
                      .titleSmall
                      ?.copyWith(fontSize: 18.0),
                ),
                subtitle: Text(
                  '${category.items} items',
                  style: Theme.of(context).textTheme.bodySmall,
                ),
                trailing: Icon(
                  _expandedStates[index]
                      ? Icons.expand_less
                      : Icons.expand_more,
                  color: AppColors.secondaryGold,
                ),
                onExpansionChanged: (expanded) {
                  setState(() {
                    _expandedStates[index] = expanded;
                  });
                },
                children: category.subCategories.map(
                  (subCategory) {
                    return ListTile(
                      title: Text(
                        subCategory.name,
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                              fontSize: 16.0,
                            ),
                      ),
                      subtitle: Text(
                        '${subCategory.items} items',
                        style: Theme.of(context).textTheme.bodySmall,
                      ),
                    );
                  },
                ).toList(),
              ),
            );
          },
        ),
      ),
    );
  }
}



===== lib/views/help_support_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:flutter/material.dart';

class HelpSupportView extends StatelessWidget {
  final List<Map<String, String>> faqs = [
    {
      "question": "How do I place an order?",
      "answer":
          "To place an order, browse our catalog, select the items you want, add them to your cart, and proceed to checkout. Follow the prompts to enter your shipping and payment information."
    },
    {
      "question": "What payment methods do you accept?",
      "answer":
          "We accept major credit cards (Visa, MasterCard, American Express), PayPal, and Apple Pay."
    },
    {
      "question": "How long does shipping take?",
      "answer":
          "Shipping times vary depending on your location. Standard shipping typically takes 3-5 business days, while express shipping can take 1-2 business days."
    },
    {
      "question": "Do you offer international shipping?",
      "answer":
          "Yes, we offer international shipping to most countries. Shipping costs and delivery times may vary depending on the destination."
    },
    {
      "question": "What is your return policy?",
      "answer":
          "We offer a 30-day return policy for most items. Products must be in their original condition with all packaging and accessories. Please contact us to initiate a return."
    }
  ];

  HelpSupportView({super.key});

  @override
  Widget build(BuildContext context) {
    return BaseScaffold(
      title: 'Help & Support',
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Card(
                color: AppColors.primaryCream,
                shape: RoundedRectangleBorder(
                  side: const BorderSide(color: AppColors.secondaryGold),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Frequently Asked Questions',
                        style: Theme.of(context)
                            .textTheme
                            .titleSmall
                            ?.copyWith(fontSize: 20.0),
                      ),
                      const SizedBox(height: 16),
                      ...faqs.map((faq) => ExpansionTile(
                            title: Text(
                              faq['question']!,
                              style: Theme.of(context)
                                  .textTheme
                                  .bodySmall
                                  ?.copyWith(
                                    fontSize: 18.0,
                                    color: AppColors.primaryBurgundy,
                                  ),
                            ),
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(16),
                                child: Text(faq['answer']!,
                                    style:
                                        Theme.of(context).textTheme.bodySmall),
                              ),
                            ],
                          )),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Card(
                color: AppColors.primaryCream,
                shape: RoundedRectangleBorder(
                  side: const BorderSide(color: AppColors.secondaryGold),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Contact Us',
                        style: Theme.of(context)
                            .textTheme
                            .titleSmall
                            ?.copyWith(fontSize: 20.0),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'If you have any questions or concerns that aren\'t addressed in our FAQ, please don\'t hesitate to reach out to us via email.',
                        style: Theme.of(context).textTheme.bodySmall,
                      ),
                      const SizedBox(height: 16),
                      Row(
                        children: [
                          const Icon(Icons.email,
                              color: AppColors.secondaryGreen),
                          const SizedBox(width: 8),
                          Text('support@audiogear.com',
                              style: Theme.of(context).textTheme.displaySmall),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}



===== lib/views/store/product_detail_view.dart =====
import 'package:e_commerce_project/constants/app_colors.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/services/store/product.dart';

class ProductDetailView extends StatelessWidget {
  final Product product;

  const ProductDetailView({super.key, required this.product});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Charly\'s Hideout',
          style: Theme.of(context).textTheme.titleLarge,
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          color: AppColors.primaryCream,
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        backgroundColor: AppColors.primaryBurgundy,
        actions: const [],
      ),
      backgroundColor: AppColors.primaryCream,
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            AspectRatio(
              aspectRatio: 4 / 3,
              child: Image.network(
                product.images[0],
                fit: BoxFit.contain,
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    color: AppColors.secondaryGold,
                    child: const Center(
                      child: Icon(Icons.image_not_supported,
                          size: 50, color: AppColors.primaryBurgundy),
                    ),
                  );
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    product.title,
                    style: Theme.of(context).textTheme.bodyLarge,
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        '\$${product.unitPrice.toStringAsFixed(2)}',
                        style: Theme.of(context).textTheme.labelMedium,
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  Text(
                    'Description',
                    style: Theme.of(context).textTheme.headlineSmall,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    product.description,
                    style: Theme.of(context).textTheme.bodySmall,
                  ),
                  const SizedBox(height: 24),
                  Text(
                    'Specifications',
                    style: Theme.of(context).textTheme.headlineSmall,
                  ),
                  const SizedBox(height: 8),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: product.features
                        .map<Widget>((spec) => Padding(
                              padding: const EdgeInsets.only(bottom: 4),
                              child: Text(
                                '• $spec',
                                style: Theme.of(context).textTheme.bodySmall,
                              ),
                            ))
                        .toList(),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: Container(
        padding: const EdgeInsets.all(16),
        decoration: const BoxDecoration(
            color: AppColors.primaryCream,
            border: Border(
                top: BorderSide(
              color: AppColors.secondaryGold,
              width: 1.0,
            ))),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.secondaryGold,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          onPressed: () {
            // Implement add to cart functionality
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Thank You!')),
            );
          },
          child: Text('Send a Whatsapp to Charly',
              style: Theme.of(context).textTheme.headlineSmall),
        ),
      ),
    );
  }
}



===== lib/views/store/main_store_view.dart =====
import 'package:e_commerce_project/services/bloc/navigation_bloc.dart';
import 'package:e_commerce_project/services/bloc/navigation_states.dart';
import 'package:e_commerce_project/services/cache/product_cache.dart';
import 'package:e_commerce_project/services/store/product.dart';
import 'package:e_commerce_project/widgets/base_scaffold.dart';
import 'package:e_commerce_project/widgets/item_grid.dart';
import 'package:flutter/material.dart';
import 'package:e_commerce_project/widgets/custom_search_delegate.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class StoreView extends StatelessWidget {
  const StoreView({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<NavigationBloc, NavigationState>(
      builder: (context, state) {
        List<Product>? products;
        if (state is StoreState) {
          products = state.categoryId == ''
              ? ProductCache().getAllProducts()!
              : ProductCache().getProducts(state.categoryId);
        }

        return BaseScaffold(
          title: 'Charly\'s Hideout',
          actions: [
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(Icons.search),
                onPressed: () {
                  showSearch(
                    context: context,
                    delegate: CustomSearchDelegate(products!),
                  );
                },
              ),
            ),
          ],
          body: ItemGrid(
            items: products!,
          ),
        );
      },
    );
  }
}



